{
    "contents" : "---\nlayout: post\ncomments:  true\ntitle:  \"chisqtestGC() Tutorial\"\ndate: 2014-02-01 20:00:00\npublished: true\ncategories: ['Student-Focused Tutorials']\noutput:\n  html_document:\n    mathjax:  default\n---\n\n* will be replaced by TOB\n{:toc}\n\n```{r include=FALSE}\nlibrary(knitr)\nopts_chunk$set(tidy=FALSE,fig.width=4.5,fig.height=3.5)\n```\n\n\n## Preliminaries\n\n\nYou use the $$ \\chi^2 $$-test when you are addressing the inferential aspect of research questions about:\n\n* the relationship between two factor variables (test for association);\n* the distribution of one factor variable (goodness-of-fit test).\n\nThe function (and some of the data) that we will use comes from the `tigerstats` package, so make sure that it is loaded:\n\n```{r message=FALSE}\nrequire(tigerstats)\n```\n\n**Note:**  If you are not working with the R Studio server hosted by Georgetown College, then you will need install `tigerstats` on your own machine.  You can get the current version from [Github](http://github.com) by first installing the `devtools` package from the CRAN repository, and then running the following commands in a fresh R session:\n\n```{r eval=FALSE}\nrequire(devtools)\ninstall_github(repo=\"homerhanumat/tigerstats\")\n```\n\n## Two Factor Variables (Association)\n\n### Formula-Data Input\n\nWhen your data are in raw form, straight from a data frame, you can perform the test using \"formula-data input\".  For example, in the `mat111survey` data, we might wonder whether sex and seating preference are related, in the population from which the sample was (allegedly randomly) drawn.  The function call and the output are as follows:\n\n```{r}\nchisqtestGC(~sex+seat,data=m111survey)\n```\n\n\n### Two-Way Table Input\n\nSometimes you already have a two-way table on hand:\n\n```{r}\nSexSeat <- xtabs(~sex+seat,data=m111survey)\nSexSeat\n```\n\nIn that case you can save yourself some typing by entering the table in place of the formula and the `data` arguments:\n\n```{r eval=FALSE}\nchisqtestGC(SexSeat)\n```\n\n\n### A Table From Summary Data\n\nRemember:  if you are given summary data, only, then you can construct a nice two-way table and enter it into `chisquaretestGC()`.  Suppose that you want this two-way table:\n\n|   |Front|Middle|Back|\n|:---------|:----------:|:----------:|:-----------:|\n|Female|19|16|5|\n|Male|8|16|7|\n\nYou can get it as follows:\n\n```{r}\nMySexSeat <- rbind(female=c(19,16,5),male=c(8,16,7))\ncolnames(MySexSeat) <- c(\"front\",\"middle\",\"back\")\n```\n\nLet's just check to see that this worked:\n\n```{r}\nMySexSeat\n```\n\nThen you can enter `MySexSeat` into the function:\n\n```{r eval=FALSE}\nchisqtestGC(MySexSeat)\n```\n\n\n### Simulation\n\nWhen the Null's expected counts are low, `chisqtestGC()` delivers a warning and suggests the use of simulation to compute the $$ P $$-value.  You do this by way of the argument `simulate.p.value`, and you have three options:\n\n* `simulate.p.value = \"fixed\"`\n* `simulate.p.value = \"random\"`\n* `simulate.p.value = \"TRUE\"`\n\n#### Explanatory Tallies Fixed\n\nSuppose that the objects under study are not a random sample from some larger population, and that the way chance comes into the production of the data is through random variation in all of the other factors---besides the explanatory variable--- that might be associated with the response variable.  Then since the items being observed are fixed, the tally of values for the explanatory variable are fixed.  The response values for these items are the product of chance, but only through random variation in those other factors.\n\nThe study from the `ledgejump` data frame was an example of this.  The 21 incidents were fixed, so there were nine cold-weather incidents and 12 warm-weather incidents, no matter what.  The crowd behavior at each incident, however is still a matter of chance.\n\nIn such a case you might want to resample under the restriction that in all of your resamples, the tally for the explanatory variable stays just the same as it was in the data you observed.  Then your function call looks like:\n\n```{r echo=FALSE}\nset.seed(12345)\n```\n\n\n```{r}\nchisqtestGC(~weather+crowd.behavior,data=ledgejump,\n             simulate.p.value=\"fixed\",B=2500)\n```\n\nYou can set `B`, the number of resamples, as you wish, but it should be at least a few thousand.  Of course the $$ P $$-value, having been determined by random resampling, will vary from one run of the function to another.\n\n\n#### Explanatory Tallies Random\n\nIn the `m111survey` study on sex and seating preference, the subjects are a random sample from a larger population.  In that case the tallies for both the explanatory and the response variables depend upon chance. If you simulate in such a case, then you set `simulate.p.value` to \"random\":\n\n```{r}\nchisqtestGC(~sex+seat,data=m111survey,\n             simulate.p.value=\"random\",B=2500)\n```\n\n\n\n#### Both Tallies Fixed\n\nIf you want to resample in such a way that the tallies for BOTH the explanatory and response variables stay exactly the same as they were in the actual data, then you set `simulate.p.value` to \"TRUE\".  This invokes R's standard method for resampling:\n\n```{r}\nchisqtestGC(~sex+seat,data=m111survey,\n             simulate.p.value=TRUE,B=2500)\n```\n\nIt's not easy to understand why R would adopt such a method, but there is some good theoretical support for it.  If you are ever in doubt about how to simulate, just use this third option.\n\n### Graphs of the P-Value\n\n\nYou can get a graph of the $$ P $$-value in the plot window by setting the argument `graph` to TRUE.  When you did not simulate, the graph shows a density curve for the $$ \\chi^2 $$ random variable with the relevant degrees of freedom.  When you simulate, the graph is a histogram of the resampled $$ \\chi^2 $$-statistics.\n\nHere is a case with no simulation:\n\n```{r chisqtutnosim, fig.width=4,fig.height=3.5,fig.cap=\"Graph of P-value, no simulation\"}\nchisqtestGC(~sex+seat,data=m111survey,graph=TRUE)\n```\n\n\nHere is a case with simulation:\n\n\n```{r chisqtutsim,fig.width=4,fig.height=3.5,fig.cap=\"Graph of P-value, with simulation\"}\nchisqtestGC(~sex+seat,data=m111survey,\n             simulate.p.value=\"random\",B=2500,graph=TRUE)\n```\n\n## One Factor Variable (Goodness of Fit)\n\n### Formula-Data Input\n\nThe variable **seat** in the `m111survey` data frame indicates the classroom seating preference of each person in the survey.  Suppose we want to know whether or not the sample data provide strong evidence that seating preference in the Georgetown College population is not uniformly distributed among the three possible options (Front, Middle, and Back).  That is, letting\n\n  >$$ p_f = $$ proportion of all GC students who prefer the front,\n  \n  >$$ p_m = $$ proportion of all GC students who prefer the middle,\n  \n  >$$ p_b = $$ proportion of all GC students who prefer the back,\n\nwe want to test the hypotheses:\n\n  >$$ H_0: $$  $$ p_f = 1/3 $$ and $$ p_m = 1/3 $$ and $$ p_b = 1/3 $$\n  \n  >$$ H_a: $$  at least one of the above proportions is not $$ 1/3 $$\n  \nWe can do so using the $$ \\chi^2 $$-test for goodness of fit.  The argument `p` will give what the Null Hypothesis believes to be the distribution of the variable **seat** in the Georgetown College population:\n\n```{r chisqtutseatgraph}\nchisqtestGC(~seat,data=m111survey,\n            p=c(1/3,1/3,1/3),\n            graph=TRUE)\n```\n\n\n### Summary Data\n\nSuppose that the data had only come to us in summary form:\n\n|Front|Middle|Back|\n|:----------:|:----------:|:-----------:|\n|27|32|12|\n\nWe could still perform the test, by making a table and storing it as an R-object:\n\n```{r}\nSeat <- c(front=27,middle=32,back=12)\nSeat\n```\n\nThen we could perform the test using `Seat`:\n\n```{r}\nchisqtestGC(Seat,p=c(1/3,1/3,1/3))\n```\n\n### Simulation\n\nWhen expected cell counts fall below 5, `chisqtestGC()` issues a warning and suggests the use of simulation.  We can perform simulation at any time, though.\n\nFor goodness-of-fit tests, the only relevant form of simulation is the one provided by setting `simulate.p.value` to `TRUE`.  Of course we also need to set the number `B` of resamples.\n\n```{r chisqtutseatsim}\nset.seed(678910)\nchisqtestGC(~seat,data=m111survey,\n            p=c(1/3,1/3,1/3),\n            simulate.p.value=TRUE,\n            B=2500,graph=TRUE)\n```\n\n## Want Less Output?\n\nIf you do not want to see quite so much output to the console and are only interested in the essentials for reporting a $$ \\chi^2 $$-test, then set the argument `verbose` to `FALSE`:\n\n```{r}\nchisqtestGC(~sex+seat,data=m111survey,\n            verbose=FALSE)\n```\n\n",
    "created" : 1450143122923.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1152399856",
    "id" : "1840260C",
    "lastKnownWriteTime" : 1450143131,
    "path" : "~/git/homerhanumat.github.io/_source/2014-02-01-chisqtestGCtutorial.Rmd",
    "project_path" : "_source/2014-02-01-chisqtestGCtutorial.Rmd",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_markdown"
}