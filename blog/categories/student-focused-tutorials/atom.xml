<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Student-Focused Tutorials | A Statistics Blog]]></title>
  <link href="http://statistics.rainandrhino.org/blog/categories/student-focused-tutorials/atom.xml" rel="self"/>
  <link href="http://statistics.rainandrhino.org/"/>
  <updated>2014-09-03T22:51:25-04:00</updated>
  <id>http://statistics.rainandrhino.org/</id>
  <author>
    <name><![CDATA[Homer White]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Qnorm() Tutorial]]></title>
    <link href="http://statistics.rainandrhino.org/blog/2014/04/28/qnormtutorial/"/>
    <updated>2014-04-28T22:00:00-04:00</updated>
    <id>http://statistics.rainandrhino.org/blog/2014/04/28/qnormtutorial</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#comparison-of-qnorm-with-pnorm">Comparison of <code>qnorm()</code> with <code>pnorm()</code></a></li>
  <li><a href="#a-few-more-examples">A Few More Examples</a>    <ul>
      <li><a href="#making-the-top-ten-percent-an-area-above">Making the Top Ten Percent (An Area Above)</a></li>
      <li><a href="#an-area-between">An Area Between</a></li>
    </ul>
  </li>
</ul>

<h2 id="comparison-of-qnorm-with-pnorm">Comparison of <code>qnorm()</code> with <code>pnorm()</code></h2>

<p>Thew function <code>prnorm()</code> in regular <code>R</code>, as well as the function <code>pnormGC() in the </code>tigerstats` package, compute probabilities from known bounding values.  For example, suppose that $X$ is a normally distributed random variable with mean 70 and standard deviation 3, and that you want to know:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
P(X < 72). %]]&gt;</script>

<p>Then you <em>know</em> the boundary value 72, but you don’t know the probability:  the area under the normal density curve before 72.  Functions like <code>pnormGC()</code> aim to give you that area–that probability:</p>

<pre><code>require(tigerstats)

 

pnormGC(72, region="below", mean=70,
        sd=3,graph=TRUE)
</code></pre>

<p><img src="/images/figure/qnormtut72.png" alt="plot of chunk qnormtut72" /> </p>

<pre><code>## [1] 0.7475
</code></pre>

<p>The function <code>qnorm()</code>, which comes standard with R, aims to do the opposite:  given an area, find the boundary value that determines this area.</p>

<p>For example, suppose you want to find that 85th percentile of a normal distribution whose mean is 70 and whose standard deviation is 3.  Then you ask for:</p>

<pre><code>qnorm(0.85,mean=70,sd=3)

## [1] 73.11
</code></pre>

<p>The value 73.1093 is indeed the 85th percentile, in the sense that 85% of the values in a population that is normally distributed with mean 70 and standard deviation 3 will lie below 73.1093.  In other words, if you were to pick a random member $X$ from such a population, then</p>

<p><script type="math/tex">% &lt;![CDATA[
P(X < 73.1093) = 0.85 %]]&gt;</script>.</p>

<p>You can check that this is correct by plugging 73.1093 into <code>pnormGC()</code>:</p>

<pre><code>pnormGC(73.1093,region="below",mean=70,
        sd=3,graph=TRUE)
</code></pre>

<p><img src="/images/figure/qnormtut73.png" alt="plot of chunk qnormtut73" /> </p>

<pre><code>## [1] 0.85
</code></pre>

<p>Sure enough, the area under the curve before 73.1093 is 0.85.</p>

<h2 id="a-few-more-examples">A Few More Examples</h2>

<h3 id="making-the-top-ten-percent-an-area-above">Making the Top Ten Percent (An Area Above)</h3>

<blockquote>
  <p>Suppose that SAT scores are normally distributed, and that the mean SAT score is 1000, and the standard deviation of all SAT scores is 100.  <em>How high must you score so that only 10% of the population scores higher than you?</em></p>
</blockquote>

<p>Here’s the solution.  If 10% score higher than you, then 90% score lower.  So just call <code>qnorm()</code> with 0.90 as the boundary value:</p>

<pre><code>qnorm(0.90,mean=1000,sd=100)

## [1] 1128
</code></pre>

<p>In other words, the 90th percentile of SAT scores is around 1128.</p>

<p><strong>Note</strong>:  <code>qnorm()</code> deals by default with areas <em>below</em> the given boundary value.  If we had asked for:</p>

<pre><code>qnorm(0.10,mean=1000,sd=100)
</code></pre>

<p>then we would have got only the 10th percentile of the SAT scores, not the desired 90th percentile.  If you would like to input 0.10 directly, then you can do so provided that you fiddle with the <code>lower.tail</code> argument:</p>

<pre><code>qnorm(0.10,mean=1000,sd=100,
      lower.tail=FALSE)

## [1] 1128
</code></pre>

<p>But really it seems easier just to do the math:</p>

<p>$1 - 0.10 = 0.90.$</p>

<h3 id="an-area-between">An Area Between</h3>

<blockquote>
  <p>Find a positive number $z$ so that the area under the standard normal curve between $-z$ and $z$ is 0.95.</p>
</blockquote>

<p>Here’s the solution.  If 95% of the area lies between $-z$ and $z$, then 5% of the area must lie outside of this range.  since normal curves are symmetric, half of this amount–2.5%–must lie before $-z$.  Then the area under the curve before $z$ must be:</p>

<script type="math/tex; mode=display">0.025+0.95=0.975.</script>

<p>Hence the number $z$ is actually the 97.5th percentile of the standard normal distribution, and we can find it as follows:</p>

<pre><code>qnorm(0.975,mean=0,sd=1)

## [1] 1.96
</code></pre>

<p>So $z$ is about 1.96.  We can check this result graphically as follows:</p>

<pre><code>pnormGC(c(-1.96,1.96),region="between",mean=0,
        sd=1,graph=TRUE)
</code></pre>

<p><img src="/images/figure/qnormtutbetween.png" alt="plot of chunk qnormtutbetween" /> </p>

<pre><code>## [1] 0.95
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xtabs() Tutorial]]></title>
    <link href="http://statistics.rainandrhino.org/blog/2014/02/28/xtabstutorial/"/>
    <updated>2014-02-28T18:00:00-05:00</updated>
    <id>http://statistics.rainandrhino.org/blog/2014/02/28/xtabstutorial</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#preliminaries">Preliminaries</a></li>
  <li><a href="#one-factor-variable">One Factor Variable</a></li>
  <li><a href="#two-factor-variables">Two Factor Variables</a></li>
</ul>

<h2 id="preliminaries">Preliminaries</h2>

<p><code>xtabs()</code> is the numerical version of <code>barchartGC()</code>.  You use it when you want to study</p>

<ul>
  <li>the distribution of one factor variable;</li>
  <li>the relationship between two factor variables.</li>
</ul>

<p>The function <code>xtabs()</code> comes with the <code>stats</code> package, which is always loaded in R.  However, some of the data and other functions that we will use come from the <code>tigerstats</code> package, so make sure that it is loaded:</p>

<pre><code>require(tigerstats)
</code></pre>

<p><strong>Note:</strong>  If you are not working with the R Studio server hosted by Georgetown College, then you will need install <code>tigerstats</code> on your own machine.  You can get the current version from <a href="http://github.com">Github</a> by first installing the <code>devtools</code> package from the CRAN repository, and then running the following commands in a fresh R session:</p>

<pre><code>require(devtools)
install_github(repo="homerhanumat/tigerstats")
</code></pre>

<h2 id="one-factor-variable">One Factor Variable</h2>

<p>To see a table of the tallies for the factor variable <strong>seat</strong> (from the <code>mat111survey</code> data frame in the <code>tigerstats</code> package):</p>

<pre><code>xtabs(~seat,data=m111survey)

## seat
##  1_front 2_middle   3_back 
##       27       32       12
</code></pre>

<p>In order to get the actual distribution of <strong>seat</strong>, you want percents rather than counts, so apply the function <code>rowPerc()</code> from <code>tigerstats</code>:</p>

<pre><code>rowPerc(xtabs(~seat,data=m111survey))

##  1_front 2_middle 3_back  Total
##    38.03    45.07  16.90 100.00
</code></pre>

<p>If you have a table of the counts for a variable, then you can enter it directly.  For example, suppose you have already made:</p>

<pre><code>Seat &lt;- xtabs(~seat,data=m111survey)
Seat

## seat
##  1_front 2_middle   3_back 
##       27       32       12
</code></pre>

<p>Then you can just enter the table into <code>rowPerc()</code>:</p>

<pre><code>rowPerc(Seat)

##  1_front 2_middle 3_back  Total
##    38.03    45.07  16.90 100.00
</code></pre>

<h2 id="two-factor-variables">Two Factor Variables</h2>

<p>You can also use <code>xtabs()</code> to study the relationship between two factor variables.  For example, if you want to see whether males and females differ in their seating preferences, then you might try formula-data input as follows:</p>

<pre><code>xtabs(~sex+seat,data=m111survey)

##         seat
## sex      1_front 2_middle 3_back
##   female      19       16      5
##   male         8       16      7
</code></pre>

<p>Of course, row percents are the way to actually study the relationship:</p>

<pre><code>rowPerc(xtabs(~sex+seat,data=m111survey))

##        1_front 2_middle 3_back Total
## female   47.50    40.00  12.50   100
## male     25.81    51.61  22.58   100
</code></pre>

<p>Note the type of formula used to study the relationship between two factor variables:</p>

<script type="math/tex; mode=display">\sim ExplanatoryFactor + ResponseFactor</script>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial on Lattice's Histogram()]]></title>
    <link href="http://statistics.rainandrhino.org/blog/2014/02/28/histogramtutorial/"/>
    <updated>2014-02-28T17:50:00-05:00</updated>
    <id>http://statistics.rainandrhino.org/blog/2014/02/28/histogramtutorial</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#preliminaries">Preliminaries</a></li>
  <li><a href="#one-numerical-variable">One Numerical Variable</a></li>
  <li><a href="#controlling-breaks">Controlling Breaks</a></li>
  <li><a href="#numerical-and-factor-variable">Numerical and Factor Variable</a></li>
</ul>

<h2 id="preliminaries">Preliminaries</h2>

<p>The function <code>histogram()</code> is used to study the distribution of a numerical variable.  It comes from the <code>lattice</code> package for statistical graphics, which is pre-installed with every distribution of R.  Also, package <code>tigerstats</code> depends on lattice, so if you load <code>tigerstats</code>:</p>

<pre><code>require(tigerstats)
</code></pre>

<p>then <code>lattice</code> will be loaded as well.  If you don’t plan to use <code>tigerstats</code> but you want to use the function <code>histogram()</code>, then make sure you load lattice:</p>

<pre><code>require(lattice)
</code></pre>

<p><strong>Note:</strong>  If you are not working with the R Studio server hosted by Georgetown College, then you will need to install <code>tigerstats</code> on your own machine.  You can get the current version from <a href="http://github.com">Github</a> by first installing the <code>devtools</code> package from the CRAN repository, and then running the following commands in a fresh R session:</p>

<pre><code>require(devtools)
install_github(repo="homerhanumat/tigerstats")
</code></pre>

<p>In this tutorial we will also use a function from the <code>mosaic</code> package, so let’s make sure it is loaded:</p>

<pre><code>require(mosaic)
</code></pre>

<h2 id="one-numerical-variable">One Numerical Variable</h2>

<p>In the <code>m11survey</code> data frame from the <code>tigerstats</code> package, suppose that you want to study the distribution of <strong>fastest</strong>, the fastest speed one has ever driven.  You can do so with the following command:</p>

<pre><code>histogram(~fastest,data=m111survey,
       type="density",
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven")
</code></pre>

<p><img src="/images/figure/histtutfastest.png" alt="plot of chunk histtutfastest" /> </p>

<p>Note the use of:</p>

<ul>
  <li>the <code>xlab</code> argument to label the horizontal axis, complete with units (miles per hour);</li>
  <li>the <code>main</code> argument to provide a brief but descriptive title for the graph;</li>
  <li>the <code>type</code> argument to make a density histogram (we like this type the most, but other possible types are “count” and “percent”).</li>
</ul>

<h2 id="controlling-breaks">Controlling Breaks</h2>

<p>One of the most important ways to customize a histogram is to to set your own values for the left and right-hand boundaries of the rectangles.</p>

<p>In order to accomplish this, you should first know the range of your data values.  You can find this quickly using the <code>favstats()</code> function from package <code>mosaic</code>:</p>

<pre><code>favstats(~fastest,data=m111survey)

##  min   Q1 median    Q3 max  mean    sd  n missing
##   60 90.5    102 119.5 190 105.9 20.88 71       0
</code></pre>

<p>The minimum fastest speed is 60 mph, and the maximum fastest speed is 190 mph.</p>

<p>One possible choice for rectangle boundaries is to have the left-most rectangle begin at sixty, and then have each rectangle be 10 mph wide at the base, finally reaching a rectangle that ends at 190 mph.  In other words, we want the rectangle boundaries to be:</p>

<script type="math/tex; mode=display">60,70,80,90,100,110,120,130,140,150,160,170,280,190.</script>

<p>These numbers will be the “breaks” for the rectangles in our histogram.  We can set these breaks by putting them, as a list, into the <code>breaks</code> argument of the <code>histogram()</code> function, as follows:</p>

<pre><code>histogram(~fastest,data=m111survey,
       type="density",
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven",
       breaks=c(60,70,80,90,100,110,120,130,
                140,150,160,170,180,190))
</code></pre>

<p><img src="/images/figure/histtutfastestbreaks10.png" alt="plot of chunk histtutfastestbreaks10" /> </p>

<p>You can accomplish the same thing with less typing, if you make use of the <code>seq()</code> function:</p>

<pre><code>histogram(~fastest,data=m111survey,
       type="density",
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven",
       breaks=seq(from=60,to=190,by=10))
</code></pre>

<p><img src="/images/figure/histtutfastestbreaks10seq.png" alt="plot of chunk histtutfastestbreaks10seq" /> </p>

<h2 id="numerical-and-factor-variable">Numerical and Factor Variable</h2>

<p>Suppose you want to know:</p>

<blockquote>
  <p><em>Who tends to drive faster:  guys or gals?</em></p>
</blockquote>

<p>Then you might wish to study the relationship between the numerical variable <strong>fastest</strong> and the factor variable <strong>sex</strong>.  You can use histograms in order to perform such a study.</p>

<p>Try this code:</p>

<pre><code>histogram(~fastest|sex,data=m111survey,
       type="density",
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven,\nby Sex",
       breaks=seq(from=60,to=190,by=10))
</code></pre>

<p><img src="/images/figure/histtutfastestsexcond.png" alt="plot of chunk histtutfastestsexcond" /> </p>

<p>Note that to produce side-by-side histograms, you “condition” on the factor variable with the formula:</p>

<script type="math/tex; mode=display">\sim numerical \vert factor</script>

<p>Note also the use of “\n” to split the title into two lines:  this is a useful trick when the title is long.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial on Lattice's Densityplot()]]></title>
    <link href="http://statistics.rainandrhino.org/blog/2014/02/28/densityplottutorial/"/>
    <updated>2014-02-28T17:45:00-05:00</updated>
    <id>http://statistics.rainandrhino.org/blog/2014/02/28/densityplottutorial</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#preliminaries">Preliminaries</a></li>
  <li><a href="#one-numerical-variable">One Numerical Variable</a></li>
  <li><a href="#numerical-and-factor-variable">Numerical and Factor Variable</a>    <ul>
      <li><a href="#side-by-side-plots">Side-by-Side Plots</a></li>
      <li><a href="#plots-in-the-same-panel">Plots in the Same Panel</a></li>
    </ul>
  </li>
  <li><a href="#from-and-to">From and To</a></li>
</ul>

<h2 id="preliminaries">Preliminaries</h2>

<p>The function <code>densityplot()</code> is used to study the distribution of a numerical variable.  It comes from the <code>lattice</code> package for statistical graphics, which is pre-installed with every distribution of R.  Also, package <code>tigerstats</code> depends on lattice, so if you load <code>tigerstats</code>:</p>

<pre><code>require(tigerstats)
</code></pre>

<p>then <code>lattice</code> will be loaded as well.  If you don’t plan to use <code>tigerstats</code> but you want to use the function <code>densityplot()</code>, then make sure you load lattice:</p>

<pre><code>require(lattice)
</code></pre>

<p><strong>Note:</strong>  If you are not working with the R Studio server hosted by Georgetown College, then you will need to install <code>tigerstats</code> on your own machine.  You can get the current version from <a href="http://github.com">Github</a> by first installing the <code>devtools</code> package from the CRAN repository, and then running the following commands in a fresh R session:</p>

<pre><code>require(devtools)
install_github(repo="homerhanumat/tigerstats")
</code></pre>

<h2 id="one-numerical-variable">One Numerical Variable</h2>

<p>In the <code>m11survey</code> data frame from the <code>tigerstats</code> package, suppose that you want to study the distribution of <strong>fastest</strong>, the fastest speed one has ever driven.  You can do so with the following command:</p>

<pre><code>densityplot(~fastest,data=m111survey,
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven")
</code></pre>

<p><img src="/images/figure/dentutfastest.png" alt="plot of chunk dentutfastest" /> </p>

<p>Note the use of:</p>

<ul>
  <li>the <code>xlab</code> argument to label the horizontal axis, complete with units (miles per hour);</li>
  <li>the <code>main</code> argument to provide a brief but descriptive title for the graph.</li>
</ul>

<p>If you do not want to see the “rug” of individual data values at the bottom of the plot, set the argument <code>plot.points</code> to <code>FALSE</code>:</p>

<pre><code>densityplot(~fastest,data=m111survey,
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven",
       plot.points=FALSE)
</code></pre>

<p><img src="/images/figure/dentutfastestnorug.png" alt="plot of chunk dentutfastestnorug" /> </p>

<h2 id="numerical-and-factor-variable">Numerical and Factor Variable</h2>

<p>Suppose you want to know:</p>

<blockquote>
  <p><em>Who tends to drive faster:  guys or gals?</em></p>
</blockquote>

<p>Then you might wish to study the relationship between the numerical variable <strong>fastest</strong> and the factor variable <strong>sex</strong>.  You can use density plots in two ways in order to perform such a study.</p>

<h3 id="side-by-side-plots">Side-by-Side Plots</h3>

<pre><code>densityplot(~fastest|sex,data=m111survey,
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven,\nby Sex")
</code></pre>

<p><img src="/images/figure/dentutfastestsexcond.png" alt="plot of chunk dentutfastestsexcond" /> </p>

<p>Note that to produce side-by-side plots, you “condition” on the factor variable with the formula:</p>

<script type="math/tex; mode=display">\sim numerical \vert factor</script>

<p>Note also the use of “\n” to split the title into two lines:  this is a useful trick when the title is long.</p>

<h3 id="plots-in-the-same-panel">Plots in the Same Panel</h3>

<p>You can get a density plot for each value of the factor variable and have all of the plots appear in the same panel.  This is accomplished with the <code>groups</code> argument:</p>

<pre><code>densityplot(~fastest,data=m111survey,
       groups=sex,
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven,\nby Sex",
       plot.points=FALSE,
       auto.key=TRUE)
</code></pre>

<p><img src="/images/figure/dentutfastestsexgroups.png" alt="plot of chunk dentutfastestsexgroups" /> </p>

<p>Note the use of the <code>auto,key</code> argument to produce the legend at the top, so that the reader can tell which plot goes with which sex.</p>

<p>Many people think that grouped density plots allow for easier comparison than side-by-side plots do—at least if the number of groups is small.</p>

<h2 id="from-and-to">From and To</h2>

<p>In the <code>imagpop</code> data frame, the variable <strong>kkardashtemp</strong> records the rating given, by each individual in the data frame, for the celebrity Kim Kardashian.  The possible ratings range from 0 to 100.</p>

<p>Let’s make a density plot of this variable:</p>

<pre><code>densityplot(~kkardashtemp,data=imagpop,
            plot.points=FALSE)
</code></pre>

<p><img src="/images/figure/dentutkkard.png" alt="plot of chunk dentutkkard" /> </p>

<p>The function <code>densityplot()</code> has no way of knowing that <strong>kkardashtemp</strong> must lie between 0 and 100, so from the available data it infers that there is some possibility for a rating to be below 0 or above 100.  If you want to inform <code>denistyplot()</code> of the known limits, then use the <code>from</code> and <code>to</code> arguments, as follows:</p>

<pre><code>densityplot(~kkardashtemp,data=imagpop,
            plot.points=FALSE,
            from=0,to=100)
</code></pre>

<p><img src="/images/figure/dentutkkardfromto.png" alt="plot of chunk dentutkkardfromto" /> </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial on Lattice's Xyplot()]]></title>
    <link href="http://statistics.rainandrhino.org/blog/2014/02/28/xyplottutorial/"/>
    <updated>2014-02-28T17:30:00-05:00</updated>
    <id>http://statistics.rainandrhino.org/blog/2014/02/28/xyplottutorial</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#preliminaries">Preliminaries</a></li>
  <li><a href="#basic-scatterplot">Basic Scatterplot</a></li>
  <li><a href="#including-a-regression-line">Including a Regression Line</a></li>
  <li><a href="#playing-with-points">Playing With Points</a></li>
</ul>

<h2 id="preliminaries">Preliminaries</h2>

<p>The function <code>xyplot()</code> makes scatterplots to indicate the relationship between two numerical variables.  It comes from the <code>lattice</code> package for statistical graphics, which is pre-installed with every distribution of R.  Also, package <code>tigerstats</code> depends on lattice, so if you load <code>tigerstats</code>:</p>

<pre><code>require(tigerstats)
</code></pre>

<p>then <code>lattice</code> will be loaded as well.  If you don’t plan to use <code>tigerstats</code> but you want to use the function <code>xyplot()</code>, then make sure you load lattice:</p>

<pre><code>require(lattice)
</code></pre>

<p><strong>Note:</strong>  If you are not working with the R Studio server hosted by Georgetown College, then you will need to install <code>tigerstats</code> on your own machine.  You can get the current version from <a href="http://github.com">Github</a> by first installing the <code>devtools</code> package from the CRAN repository, and then running the following commands in a fresh R session:</p>

<pre><code>require(devtools)
install_github(repo="homerhanumat/tigerstats")
</code></pre>

<h2 id="basic-scatterplot">Basic Scatterplot</h2>

<p>Suppose you want to know:</p>

<blockquote>
  <p><em>Do students with higher GPA’s tend to drive more slowly than students with lower GPA’s?</em></p>
</blockquote>

<p>If so, then you might check to see if numerical variable <strong>fastest</strong> (in the <code>m111survey</code> data frame from the <code>tigerstats</code> package) is realted to the numerical variable <code>GPA</code>.  Then you can make a scatterplot as follows:</p>

<pre><code>xyplot(fastest~GPA,data=m111survey,
       xlab="grade point average",
       ylab="speed (mph)",
       main="Fastest Speed Ever Driven,\nby Grade Point Average")
</code></pre>

<p><img src="/images/figure/xytutfastestgpa.png" alt="plot of chunk xytutfastestgpa" /> </p>

<p>Note the use of:</p>

<ul>
  <li>the <code>xlab</code> argument to label the horizontal axis;</li>
  <li>the <code>ylab</code> argument to label the vertical axis, complete with units (miles per hour);</li>
  <li>the <code>main</code> argument to provide a brief but descriptive title for the graph;</li>
  <li>the “\n” to make two lines in the title (useful if you have a long title).</li>
</ul>

<p>When we think of one variable as explanatory and the other as the response, it is common to put the explanatory on the horizontal axis and the response on the vertical axis.  This is accomplished by the formula</p>

<script type="math/tex; mode=display">response \sim explanatory</script>

<h2 id="including-a-regression-line">Including a Regression Line</h2>

<p>If you want desire a regression line along with your scatterplot, use the argument <code>type</code>, as follows:</p>

<pre><code>xyplot(fastest~GPA,data=m111survey,
       xlab="grade point average",
       ylab="speed (mph)",
       main="Fastest Speed Ever Driven,\nby Grade Point Average",
       type=c("p","r"))
</code></pre>

<p><img src="/images/figure/xytutfastestgpareg.png" alt="plot of chunk xytutfastestgpareg" /> </p>

<p>The list given by <code>c("p","r")</code> tells <code>xyplot()</code> that we want both the points (“p”) and a regression line (“r”).</p>

<h2 id="playing-with-points">Playing With Points</h2>

<p>You can vary the type of point using the <code>pch</code> argument, and the color of the points with the <code>col</code> argument.  For example:</p>

<pre><code>xyplot(fastest~GPA,data=m111survey,
       xlab="grade point average",
       ylab="speed (mph)",
       main="Fastest Speed Ever Driven,\nby Grade Point Average",
       pch=19,col="blue")
</code></pre>

<p><img src="/images/figure/xytutfastestgpapoints.png" alt="plot of chunk xytutfastestgpapoints" /> </p>

<p>There are 25 different values for <code>pch</code>:  the integers 1 through 25.</p>

<p>There are many, many values for <code>col</code>.  You can explore 657 of them with the command:</p>

<pre><code>colors()
</code></pre>

]]></content>
  </entry>
  
</feed>
