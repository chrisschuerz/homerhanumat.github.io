<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Student-Focused Tutorials | A Statistics Blog]]></title>
  <link href="http://homerhanumat.github.io/blog/categories/student-focused-tutorials/atom.xml" rel="self"/>
  <link href="http://homerhanumat.github.io/"/>
  <updated>2014-02-28T22:00:44-05:00</updated>
  <id>http://homerhanumat.github.io/</id>
  <author>
    <name><![CDATA[Homer White]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tutorial on Lattice's Histogram()]]></title>
    <link href="http://homerhanumat.github.io/blog/2014/02/28/histogramtutorial/"/>
    <updated>2014-02-28T17:50:00-05:00</updated>
    <id>http://homerhanumat.github.io/blog/2014/02/28/histogramtutorial</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#preliminaries">Preliminaries</a></li>
  <li><a href="#one-numerical-variable">One Numerical Variable</a></li>
  <li><a href="#controlling-breaks">Controlling Breaks</a></li>
  <li><a href="#numerical-and-factor-variable">Numerical and Factor Variable</a></li>
</ul>

<h2 id="preliminaries">Preliminaries</h2>

<p>The function <code>histogram()</code> is used to study the distribution of a numerical variable.  It comes from the <code>lattice</code> package for statistical graphics, which is pre-installed with every distribution of R.  Also, package <code>tigerstats</code> depends on lattice, so if you load <code>tigerstats</code>:</p>

<pre><code>require(tigerstats)
</code></pre>

<p>then <code>lattice</code> will be loaded as well.  If you don’t plan to use <code>tigerstats</code> but you want to use the function <code>histogram()</code>, then make sure you load lattice:</p>

<pre><code>require(lattice)
</code></pre>

<p><strong>Note:</strong>  If you are not working with the R Studio server hosted by Georgetown College, then you will need to install <code>tigerstats</code> on your own machine.  You can get the current version from <a href="http://github.com">Github</a> by first installing the <code>devtools</code> package from the CRAN repository, and then running the following commands in a fresh R session:</p>

<pre><code>require(devtools)
install_github(repo="homerhanumat/tigerstats")
</code></pre>

<p>In this tutorial we will also use a function from the <code>mosaic</code> package, so let’s make sure it is loaded:</p>

<pre><code>require(mosaic)
</code></pre>

<h2 id="one-numerical-variable">One Numerical Variable</h2>

<p>In the <code>m11survey</code> data frame from the <code>tigerstats</code> package, suppose that you want to study the distribution of <strong>fastest</strong>, the fastest speed one has ever driven.  You can do so with the following command:</p>

<pre><code>histogram(~fastest,data=m111survey,
       type="density",
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven")
</code></pre>

<p><img src="/images/figure/histtutfastest.png" alt="plot of chunk histtutfastest" /> </p>

<p>Note the use of:</p>

<ul>
  <li>the <code>xlab</code> argument to label the horizontal axis, complete with units (miles per hour);</li>
  <li>the <code>main</code> argument to provide a brief but descriptive title for the graph;</li>
  <li>the <code>type</code> argument to make a density histogram (we like this type the most, but other possible types are “count” and “percent”).</li>
</ul>

<h2 id="controlling-breaks">Controlling Breaks</h2>

<p>One of the most important ways to customize a histogram is to to set your own values for the left and right-hand boundaries of the rectangles.</p>

<p>In order to accomplish this, you should first know the range of your data values.  You can find this quickly using the <code>favstats()</code> function from package <code>mosaic</code>:</p>

<pre><code>favstats(~fastest,data=m111survey)

##  min   Q1 median    Q3 max  mean    sd  n missing
##   60 90.5    102 119.5 190 105.9 20.88 71       0
</code></pre>

<p>The minimum fastest speed is 60 mph, and the maximum fastest speed is 190 mph.</p>

<p>One possible choice for rectangle boundaries is to have the left-most rectangle begin at sixty, and then have each rectangle be 10 mph wide at the base, finally reaching a rectangle that ends at 190 mph.  In other words, we want the rectangle boundaries to be:</p>

<script type="math/tex; mode=display">60,70,80,90,100,110,120,130,140,150,160,170,280,190.</script>

<p>These numbers will be the “breaks” for the rectangles in our histogram.  We can set these breaks by putting them, as a list, into the <code>breaks</code> argument of the <code>histogram()</code> function, as follows:</p>

<pre><code>histogram(~fastest,data=m111survey,
       type="density",
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven",
       breaks=c(60,70,80,90,100,110,120,130,
                140,150,160,170,180,190))
</code></pre>

<p><img src="/images/figure/histtutfastestbreaks10.png" alt="plot of chunk histtutfastestbreaks10" /> </p>

<p>You can accomplish the same thing with less typing, if you make use of the <code>seq()</code> function:</p>

<pre><code>histogram(~fastest,data=m111survey,
       type="density",
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven",
       breaks=seq(from=60,to=190,by=10))
</code></pre>

<p><img src="/images/figure/histtutfastestbreaks10seq.png" alt="plot of chunk histtutfastestbreaks10seq" /> </p>

<h2 id="numerical-and-factor-variable">Numerical and Factor Variable</h2>

<p>Suppose you want to know:</p>

<blockquote>
  <p><em>Who tends to drive faster:  guys or gals?</em></p>
</blockquote>

<p>Then you might wish to study the relationship between the numerical variable <strong>fastest</strong> and the factor variable <strong>sex</strong>.  You can use histograms in order to perform such a study.</p>

<p>Try this code:</p>

<pre><code>histogram(~fastest|sex,data=m111survey,
       type="density",
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven,\nby Sex",
       breaks=seq(from=60,to=190,by=10))
</code></pre>

<p><img src="/images/figure/histtutfastestsexcond.png" alt="plot of chunk histtutfastestsexcond" /> </p>

<p>Note that to produce side-by-side histograms, you “condition” on the factor variable with the formula:</p>

<script type="math/tex; mode=display">\sim numerical \vert factor</script>

<p>Note also the use of “\n” to split the title into two lines:  this is a useful trick when the title is long.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial on Lattice's Densityplot()]]></title>
    <link href="http://homerhanumat.github.io/blog/2014/02/28/densityplottutorial/"/>
    <updated>2014-02-28T17:45:00-05:00</updated>
    <id>http://homerhanumat.github.io/blog/2014/02/28/densityplottutorial</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#preliminaries">Preliminaries</a></li>
  <li><a href="#one-numerical-variable">One Numerical Variable</a></li>
  <li><a href="#numerical-and-factor-variable">Numerical and Factor Variable</a>    <ul>
      <li><a href="#side-by-side-plots">Side-by-Side Plots</a></li>
      <li><a href="#plots-in-the-same-panel">Plots in the Same Panel</a></li>
    </ul>
  </li>
  <li><a href="#from-and-to">From and To</a></li>
</ul>

<h2 id="preliminaries">Preliminaries</h2>

<p>The function <code>densityplot()</code> is used to study the distribution of a numerical variable.  It comes from the <code>lattice</code> package for statistical graphics, which is pre-installed with every distribution of R.  Also, package <code>tigerstats</code> depends on lattice, so if you load <code>tigerstats</code>:</p>

<pre><code>require(tigerstats)
</code></pre>

<p>then <code>lattice</code> will be loaded as well.  If you don’t plan to use <code>tigerstats</code> but you want to use the function <code>densityplot()</code>, then make sure you load lattice:</p>

<pre><code>require(lattice)
</code></pre>

<p><strong>Note:</strong>  If you are not working with the R Studio server hosted by Georgetown College, then you will need to install <code>tigerstats</code> on your own machine.  You can get the current version from <a href="http://github.com">Github</a> by first installing the <code>devtools</code> package from the CRAN repository, and then running the following commands in a fresh R session:</p>

<pre><code>require(devtools)
install_github(repo="homerhanumat/tigerstats")
</code></pre>

<h2 id="one-numerical-variable">One Numerical Variable</h2>

<p>In the <code>m11survey</code> data frame from the <code>tigerstats</code> package, suppose that you want to study the distribution of <strong>fastest</strong>, the fastest speed one has ever driven.  You can do so with the following command:</p>

<pre><code>densityplot(~fastest,data=m111survey,
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven")
</code></pre>

<p><img src="/images/figure/dentutfastest.png" alt="plot of chunk dentutfastest" /> </p>

<p>Note the use of:</p>

<ul>
  <li>the <code>xlab</code> argument to label the horizontal axis, complete with units (miles per hour);</li>
  <li>the <code>main</code> argument to provide a brief but descriptive title for the graph.</li>
</ul>

<p>If you do not want to see the “rug” of individual data values at the bottom of the plot, set the argument <code>plot.points</code> to <code>FALSE</code>:</p>

<pre><code>densityplot(~fastest,data=m111survey,
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven",
       plot.points=FALSE)
</code></pre>

<p><img src="/images/figure/dentutfastestnorug.png" alt="plot of chunk dentutfastestnorug" /> </p>

<h2 id="numerical-and-factor-variable">Numerical and Factor Variable</h2>

<p>Suppose you want to know:</p>

<blockquote>
  <p><em>Who tends to drive faster:  guys or gals?</em></p>
</blockquote>

<p>Then you might wish to study the relationship between the numerical variable <strong>fastest</strong> and the factor variable <strong>sex</strong>.  You can use density plots in two ways in order to perform such a study.</p>

<h3 id="side-by-side-plots">Side-by-Side Plots</h3>

<pre><code>densityplot(~fastest|sex,data=m111survey,
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven,\nby Sex")
</code></pre>

<p><img src="/images/figure/dentutfastestsexcond.png" alt="plot of chunk dentutfastestsexcond" /> </p>

<p>Note that to produce side-by-side plots, you “condition” on the factor variable with the formula:</p>

<script type="math/tex; mode=display">\sim numerical \vert factor</script>

<p>Note also the use of “\n” to split the title into two lines:  this is a useful trick when the title is long.</p>

<h3 id="plots-in-the-same-panel">Plots in the Same Panel</h3>

<p>You can get a density plot for each value of the factor variable and have all of the plots appear in the same panel.  This is accomplished with the <code>groups</code> argument:</p>

<pre><code>densityplot(~fastest,data=m111survey,
       groups=sex,
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven,\nby Sex",
       plot.points=FALSE,
       auto.key=TRUE)
</code></pre>

<p><img src="/images/figure/dentutfastestsexgroups.png" alt="plot of chunk dentutfastestsexgroups" /> </p>

<p>Note the use of the <code>auto,key</code> argument to produce the legend at the top, so that the reader can tell which plot goes with which sex.</p>

<p>Many people think that grouped density plots allow for easier comparison than side-by-side plots do—at least if the number of groups is small.</p>

<h2 id="from-and-to">From and To</h2>

<p>In the <code>imagpop</code> data frame, the variable <strong>kkardashtemp</strong> records the rating given, by each individual in the data frame, for the celebrity Kim Kardashian.  The possible ratings range from 0 to 100.</p>

<p>Let’s make a density plot of this variable:</p>

<pre><code>densityplot(~kkardashtemp,data=imagpop,
            plot.points=FALSE)
</code></pre>

<p><img src="/images/figure/dentutkkard.png" alt="plot of chunk dentutkkard" /> </p>

<p>The function <code>densityplot()</code> has no way of knowing that <strong>kkardashtemp</strong> must lie between 0 and 100, so from the available data it infers that there is some possibility for a rating to be below 0 or above 100.  If you want to inform <code>denistyplot()</code> of the known limits, then use the <code>from</code> and <code>to</code> arguments, as follows:</p>

<pre><code>densityplot(~kkardashtemp,data=imagpop,
            plot.points=FALSE,
            from=0,to=100)
</code></pre>

<p><img src="/images/figure/dentutkkardfromto.png" alt="plot of chunk dentutkkardfromto" /> </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial on Lattice's Xyplot()]]></title>
    <link href="http://homerhanumat.github.io/blog/2014/02/28/xyplottutorial/"/>
    <updated>2014-02-28T17:30:00-05:00</updated>
    <id>http://homerhanumat.github.io/blog/2014/02/28/xyplottutorial</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#preliminaries">Preliminaries</a></li>
  <li><a href="#basic-scatterplot">Basic Scatterplot</a></li>
  <li><a href="#including-a-regression-line">Including a Regression Line</a></li>
  <li><a href="#playing-with-points">Playing With Points</a></li>
</ul>

<h2 id="preliminaries">Preliminaries</h2>

<p>The function <code>xyplot()</code> makes scatterplots to indicate the relationship between two numerical variables.  It comes from the <code>lattice</code> package for statistical graphics, which is pre-installed with every distribution of R.  Also, package <code>tigerstats</code> depends on lattice, so if you load <code>tigerstats</code>:</p>

<pre><code>require(tigerstats)
</code></pre>

<p>then <code>lattice</code> will be loaded as well.  If you don’t plan to use <code>tigerstats</code> but you want to use the function <code>xyplot()</code>, then make sure you load lattice:</p>

<pre><code>require(lattice)
</code></pre>

<p><strong>Note:</strong>  If you are not working with the R Studio server hosted by Georgetown College, then you will need to install <code>tigerstats</code> on your own machine.  You can get the current version from <a href="http://github.com">Github</a> by first installing the <code>devtools</code> package from the CRAN repository, and then running the following commands in a fresh R session:</p>

<pre><code>require(devtools)
install_github(repo="homerhanumat/tigerstats")
</code></pre>

<h2 id="basic-scatterplot">Basic Scatterplot</h2>

<p>Suppose you want to know:</p>

<blockquote>
  <p><em>Do students with higher GPA’s tend to drive more slowly than students with lower GPA’s?</em></p>
</blockquote>

<p>If so, then you might check to see if numerical variable <strong>fastest</strong> (in the <code>m111survey</code> data frame from the <code>tigerstats</code> package) is realted to the numerical variable <code>GPA</code>.  Then you can make a scatterplot as follows:</p>

<pre><code>xyplot(fastest~GPA,data=m111survey,
       xlab="grade point average",
       ylab="speed (mph)",
       main="Fastest Speed Ever Driven,\nby Grade Point Average")
</code></pre>

<p><img src="/images/figure/xytutfastestgpa.png" alt="plot of chunk xytutfastestgpa" /> </p>

<p>Note the use of:</p>

<ul>
  <li>the <code>xlab</code> argument to label the horizontal axis;</li>
  <li>the <code>ylab</code> argument to label the vertical axis, complete with units (miles per hour);</li>
  <li>the <code>main</code> argument to provide a brief but descriptive title for the graph;</li>
  <li>the “\n” to make two lines in the title (useful if you have a long title).</li>
</ul>

<p>When we think of one variable as explanatory and the other as the response, it is common to put the explanatory on the horizontal axis and the response on the vertical axis.  This is accomplished by the formula</p>

<script type="math/tex; mode=display">response \sim explanatory</script>

<h2 id="including-a-regression-line">Including a Regression Line</h2>

<p>If you want desire a regression line along with your scatterplot, use the argument <code>type</code>, as follows:</p>

<pre><code>xyplot(fastest~GPA,data=m111survey,
       xlab="grade point average",
       ylab="speed (mph)",
       main="Fastest Speed Ever Driven,\nby Grade Point Average",
       type=c("p","r"))
</code></pre>

<p><img src="/images/figure/xytutfastestgpareg.png" alt="plot of chunk xytutfastestgpareg" /> </p>

<p>The list given by <code>c("p","r")</code> tells <code>xyplot()</code> that we want both the points (“p”) and a regression line (“r”).</p>

<h2 id="playing-with-points">Playing With Points</h2>

<p>You can vary the type of point using the <code>pch</code> argument, and the color of the points with the <code>col</code> argument.  For example:</p>

<pre><code>xyplot(fastest~GPA,data=m111survey,
       xlab="grade point average",
       ylab="speed (mph)",
       main="Fastest Speed Ever Driven,\nby Grade Point Average",
       pch=19,col="blue")
</code></pre>

<p><img src="/images/figure/xytutfastestgpapoints.png" alt="plot of chunk xytutfastestgpapoints" /> </p>

<p>There are 25 different values for <code>pch</code>:  the integers 1 through 25.</p>

<p>There are many, many values for <code>col</code>.  You can explore 657 of them with the command:</p>

<pre><code>colors()
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tutorial on Lattice's Bwplot()]]></title>
    <link href="http://homerhanumat.github.io/blog/2014/02/28/bwplottutorial/"/>
    <updated>2014-02-28T17:00:00-05:00</updated>
    <id>http://homerhanumat.github.io/blog/2014/02/28/bwplottutorial</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#preliminaries">Preliminaries</a></li>
  <li><a href="#one-numerical-variable">One Numerical Variable</a></li>
  <li><a href="#numerical-and-factor-variable">Numerical and Factor Variable</a></li>
  <li><a href="#warning">Warning</a></li>
</ul>

<h2 id="preliminaries">Preliminaries</h2>

<p>The function <code>bwplot()</code> makes box-and-whisker plots for numerical variables.  It comes from the <code>lattice</code> package for statistical graphics, which is pre-installed with every distribution of R.  Also, package <code>tigerstats</code> depends on lattice, so if you load <code>tigerstats</code>:</p>

<pre><code>require(tigerstats)
</code></pre>

<p>then <code>lattice</code> will be loaded as well.  If you don’t plan to use <code>tigerstats</code> but you want to use the function <code>bwplot()</code>, then make sure you load lattice:</p>

<pre><code>require(lattice)
</code></pre>

<p><strong>Note:</strong>  If you are not working with the R Studio server hosted by Georgetown College, then you will need to install <code>tigerstats</code> on your own machine.  You can get the current version from <a href="http://github.com">Github</a> by first installing the <code>devtools</code> package from the CRAN repository, and then running the following commands in a fresh R session:</p>

<pre><code>require(devtools)
install_github(repo="homerhanumat/tigerstats")
</code></pre>

<h2 id="one-numerical-variable">One Numerical Variable</h2>

<p>For a box-and-whisker plot of the fastest speeds ever driven by students in the <code>m111survey</code> data frame, use the command:</p>

<pre><code>bwplot(~fastest,data=m111survey,
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven")
</code></pre>

<p><img src="/images/figure/bwtutfastest.png" alt="plot of chunk bwtutfastest" /> </p>

<p>Note the use of:</p>

<ul>
  <li>the <code>xlab</code> argument to label the horizontal axis, complete with units (miles per hour);</li>
  <li>the <code>main</code> argument to provide a brief but descriptive title for the graph.</li>
</ul>

<h2 id="numerical-and-factor-variable">Numerical and Factor Variable</h2>

<p>Say you want to know:</p>

<blockquote>
  <p><em>Who tends to drive faster:  the guys or the gals?</em></p>
</blockquote>

<p>Then you are studying the relationship between the numerical variable <strong>fastest</strong> and the factor variable <strong>sex</strong>.  <code>bwplot()</code> will break the fastest speeds up by sex and parallel box-and-whisker plots, if you run the following command:</p>

<pre><code>bwplot(fastest~sex,data=m111survey,
       ylab="speed (mph)",
       main="Fastest Speed Ever Driven,\nby Sex of Subject")
</code></pre>

<p><img src="/images/figure/bwtutfastestsex.png" alt="plot of chunk bwtutfastestsex" /> </p>

<p>Note the use of the “\n” to create a two-line title.  This trick can come in handy if your title is long!</p>

<p>If you prefer your box-and-whisker plots to be horizontal, then you can reverse the order of the variables in the formula:</p>

<pre><code>bwplot(sex~fastest,data=m111survey,
       xlab="speed (mph)",
       main="Fastest Speed Ever Driven,\nby Sex of Subject")
</code></pre>

<p><img src="/images/figure/bwtutfastestsexhoriz.png" alt="plot of chunk bwtutfastestsexhoriz" /> </p>

<h2 id="warning">Warning</h2>

<p>Box-and-Whisker plots are great for studying:</p>

<ul>
  <li>one numerical variable</li>
  <li>the relationship between a numerical variable and a factor variable.</li>
</ul>

<p>However, if you try to study the relationship between two numerical variables with <code>bwplot()</code>, you will get bizarre results.</p>

<p>For example, suppose you want to study the relationship between fastest speed ever driven (<strong>fastest</strong>) and the grade point average (<strong>GPA</strong>) of the subjects in <code>m111survey</code>:</p>

<pre><code>bwplot(fastest~GPA,data=m111survey,
       ylab="speed (mph)",
       xbal="grade-point average",
       main="Fastes Speed Ever Driven,\nby Grade-Point Average")
</code></pre>

<p><img src="/images/figure/bwtutbad.png" alt="plot of chunk bwtutbad" /> </p>

<p><code>bwplot()</code> expects at least one of the two variable in the formula to be numerical.  When it is presented with two numerical variables it politely makes do—apparently converting <strong>fastest</strong> into a new factor variable—but the resulting graph doesn’t make any sense at all.</p>

<p>Use <code>xyplot()</code> (scatterplots) to study the relationship between two numerical variables.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[proptestGC() Tutorial]]></title>
    <link href="http://homerhanumat.github.io/blog/2014/02/28/proptestGCtutorial/"/>
    <updated>2014-02-28T16:00:00-05:00</updated>
    <id>http://homerhanumat.github.io/blog/2014/02/28/proptestGCtutorial</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#preliminaries">Preliminaries</a></li>
  <li><a href="#one-proportion-from-data-frame-read-this">One Proportion, From Data Frame (Read This!!)</a>    <ul>
      <li><a href="#confidence-interval-only">Confidence Interval Only</a></li>
      <li><a href="#interval-and-test">Interval and Test</a></li>
      <li><a href="#graph-of-the-p-value">Graph of the P-Value</a></li>
      <li><a href="#limiting-output">Limiting Output</a></li>
    </ul>
  </li>
  <li><a href="#one-proportion-from-summary-data">One Proportion, From Summary Data</a>    <ul>
      <li><a href="#confidence-interval-only-1">Confidence Interval Only</a></li>
      <li><a href="#interval-and-test-1">Interval and Test</a></li>
    </ul>
  </li>
  <li><a href="#difference-of-two-proportions-data-frame">Difference of Two Proportions, Data Frame</a>    <ul>
      <li><a href="#confidence-interval-only-2">Confidence Interval Only</a></li>
      <li><a href="#interval-and-test-2">Interval and Test</a></li>
      <li><a href="#order-of-the-groups">Order of the Groups</a></li>
    </ul>
  </li>
  <li><a href="#difference-of-two-proportions-summary-data">Difference of Two Proportions, Summary Data</a>    <ul>
      <li><a href="#confidence-interval-only-3">Confidence Interval Only</a></li>
      <li><a href="#interval-and-test-3">Interval and Test</a></li>
    </ul>
  </li>
</ul>

<h2 id="preliminaries">Preliminaries</h2>

<p>You use <code>proptestGC()</code> for inferential procedures regarding:</p>

<ul>
  <li>one population proportion $p$;</li>
  <li>the difference of two population proportions, $p_1 - p_2$.</li>
</ul>

<p>The function comes from the <code>tigerstats</code> package, so make sure that <code>tigerstats</code> is loaded:</p>

<pre><code>require(tigerstats)
</code></pre>

<p><strong>Note:</strong>  If you are not working with the R Studio server hosted by Georgetown College, then you will need to install <code>tigerstats</code> on your own machine.  You can get the current version from <a href="http://github.com">Github</a> by first installing the <code>devtools</code> package from the CRAN repository, and then running the following commands in a fresh R session:</p>

<pre><code>require(devtools)
install_github(repo="homerhanumat/tigerstats")
</code></pre>

<h2 id="one-proportion-from-data-frame-read-this">One Proportion, From Data Frame (Read This!!)</h2>

<p>In inference procedures regarding one proportion, <code>binomtestGC()</code> is preferred over <code>proptestGC()</code>, especially at smaller sample sizes.  Nevertheless, read this section carefully.  It talks about:</p>

<ul>
  <li>what to count as a “success”,</li>
  <li>levels of confidence,</li>
  <li>types of Alternative Hypothesis,</li>
  <li>graphs of the P-value, and</li>
  <li>an option to limit output to the console</li>
</ul>

<p>in ways that apply to all uses of <code>proptestGC()</code>.</p>

<h3 id="confidence-interval-only">Confidence Interval Only</h3>

<p>In the <code>m111survey</code> data from the <code>tigerstats</code> package, suppose you want a 95%-confidence interval for:</p>

<blockquote>
  <p>$p =$ the proportion of all Georgetown College students who are female.</p>
</blockquote>

<p>Use the function:</p>

<pre><code>proptestGC(~sex,data=m111survey,
           success="female")

## 
## 
## Inferential Procedures for a Single Proportion p:
## 	Variable under study is sex 
## 	Continuity Correction Applied to Test Statistic
## 
## 
## Descriptive Results:
## 
##  female  n estimated.prop
##      40 71         0.5634
## 
## 
## Inferential Results:
## 
## Estimate of p:	 0.5634 
## SE(p.hat):	 0.05886 
## 
## 95% Confidence Interval for p:
## 
##           lower.bound         upper.bound          
##           0.448016            0.678745
</code></pre>

<p>Note that the <code>success</code> argument is set to “female” in order to make the function recognize $p$ as the population proportion of <em>females</em>, rather than the proportion of males (or of some other value of the variable in question).</p>

<p>To get any other level of confidence, you need to use the <code>conf.level</code> argument, indicating your desired level of confidence in decimal (not percentage) form.</p>

<p>For example, for a 90%-confidence interval for $\mu$, use</p>

<pre><code>proptestGC(~sex,data=m111survey,
           success="female",conf.level=0.90)

## 
## 
## Inferential Procedures for a Single Proportion p:
## 	Variable under study is sex 
## 	Continuity Correction Applied to Test Statistic
## 
## 
## Descriptive Results:
## 
##  female  n estimated.prop
##      40 71         0.5634
## 
## 
## Inferential Results:
## 
## Estimate of p:	 0.5634 
## SE(p.hat):	 0.05886 
## 
## 90% Confidence Interval for p:
## 
##           lower.bound         upper.bound          
##           0.466564            0.660197
</code></pre>

<h3 id="interval-and-test">Interval and Test</h3>

<p>If you want a test of significance as well as the confidence interval, then</p>

<ul>
  <li>use the <code>p</code> argument to set what the Null Hypothesis thinks that the value of $p$ is;</li>
  <li>use the <code>alternative</code> argument to specify the Alternative Hypothesis.</li>
</ul>

<p>For example, if the hypotheses are:</p>

<blockquote>
  <p>$H_0:  p = 0.50$</p>
</blockquote>

<blockquote>
  <p>$H_a: p &gt; 0.50$</p>
</blockquote>

<p>Then use:</p>

<pre><code>proptestGC(~sex,data=m111survey,p=0.50,
           success="female",alternative="greater")

## 
## 
## Inferential Procedures for a Single Proportion p:
## 	Variable under study is sex 
## 	Continuity Correction Applied to Test Statistic
## 
## 
## Descriptive Results:
## 
##  female  n estimated.prop
##      40 71         0.5634
## 
## 
## Inferential Results:
## 
## Estimate of p:	 0.5634 
## SE(p.hat):	 0.05886 
## 
## 95% Confidence Interval for p:
## 
##           lower.bound         upper.bound          
##           0.466564            1.000000             
## 
## Test of Significance:
## 
## 	H_0:  p = 0.5 
## 	H_a:  p &gt; 0.5 
## 
## 	Test Statistic:		z = 0.9571 
## 	P-value:		P = 0.1692
</code></pre>

<p>If the hypotheses are:</p>

<blockquote>
  <p>$H_0:  p = 0.50$</p>
</blockquote>

<blockquote>
  <p>$H_a: p &lt; 0.50$</p>
</blockquote>

<p>Then use:</p>

<pre><code>proptestGC(~sex,data=m111survey,p=0.50,
           success="female",alternative="less")

## 
## 
## Inferential Procedures for a Single Proportion p:
## 	Variable under study is sex 
## 	Continuity Correction Applied to Test Statistic
## 
## 
## Descriptive Results:
## 
##  female  n estimated.prop
##      40 71         0.5634
## 
## 
## Inferential Results:
## 
## Estimate of p:	 0.5634 
## SE(p.hat):	 0.05886 
## 
## 95% Confidence Interval for p:
## 
##           lower.bound         upper.bound          
##           0.000000            0.660197             
## 
## Test of Significance:
## 
## 	H_0:  p = 0.5 
## 	H_a:  p &lt; 0.5 
## 
## 	Test Statistic:		z = 1.196 
## 	P-value:		P = 0.8842
</code></pre>

<p>If the hypotheses are:</p>

<blockquote>
  <p>$H_0:  p = 0.50$</p>
</blockquote>

<blockquote>
  <p>$H_a: p \neq 0.50$</p>
</blockquote>

<p>Then use:</p>

<pre><code>proptestGC(~sex,data=m111survey,p=0.50,
        success="female",alternative="two.sided")

## 
## 
## Inferential Procedures for a Single Proportion p:
## 	Variable under study is sex 
## 	Continuity Correction Applied to Test Statistic
## 
## 
## Descriptive Results:
## 
##  female  n estimated.prop
##      40 71         0.5634
## 
## 
## Inferential Results:
## 
## Estimate of p:	 0.5634 
## SE(p.hat):	 0.05886 
## 
## 95% Confidence Interval for p:
## 
##           lower.bound         upper.bound          
##           0.448016            0.678745             
## 
## Test of Significance:
## 
## 	H_0:  p = 0.5 
## 	H_a:  p != 0.5 
## 
## 	Test Statistic:		z = 0.9571 
## 	P-value:		P = 0.3385
</code></pre>

<p>But note that the default value of <code>alternative</code> is “two.sided”, so if you want you could just leave it out and still get a two-sided test:</p>

<pre><code>proptestGC(~sex,data=m111survey,p=0.50,
           success="female")
</code></pre>

<h3 id="graph-of-the-p-value">Graph of the P-Value</h3>

<p>Anytime you want, you can get a graph of the $P$-value for your test, simply by setting the argument <code>graph</code> to <code>TRUE</code>:</p>

<pre><code>proptestGC(~sex,data=m111survey,p=0.50,
        success="female",graph=TRUE)

## 
## 
## Inferential Procedures for a Single Proportion p:
## 	Variable under study is sex 
## 	Continuity Correction Applied to Test Statistic
## 
## 
## Descriptive Results:
## 
##  female  n estimated.prop
##      40 71         0.5634
## 
## 
## Inferential Results:
## 
## Estimate of p:	 0.5634 
## SE(p.hat):	 0.05886 
## 
## 95% Confidence Interval for p:
## 
##           lower.bound         upper.bound          
##           0.448016            0.678745             
## 
## Test of Significance:
## 
## 	H_0:  p = 0.5 
## 	H_a:  p != 0.5 
## 
## 	Test Statistic:		z = 0.9571 
## 	P-value:		P = 0.3385
</code></pre>

<p><img src="/images/figure/proptesttutoneprop2sided.png" alt="plot of chunk proptesttutoneprop2sided" /> </p>

<h3 id="limiting-output">Limiting Output</h3>

<p>Sometimes you don’t need R to print so much information to the console.  If you want only the basics (such as a confidence interval, the test statistic and $P$-value), then set the <code>verbose</code> argument to <code>FALSE</code>:</p>

<pre><code>proptestGC(~sex,data=m111survey,p=0.50,
        success="female",verbose=FALSE)

## 
## 
## Inferential Procedures for a Single Proportion p:
## 	Variable under study is sex 
## 	Continuity Correction Applied to Test Statistic
## 95% Confidence Interval for p:
## 
##           lower.bound         upper.bound          
##           0.448016            0.678745             
## 
## 	Test Statistic:		z = 0.9571 
## 	P-value:		P = 0.3385
</code></pre>

<h2 id="one-proportion-from-summary-data">One Proportion, From Summary Data</h2>

<p>Again note that <code>binomtestGC()</code> is preferred in this situation, especially at smaller sample sizes.</p>

<h3 id="confidence-interval-only-1">Confidence Interval Only</h3>

<p>Say that you have taken a simple random sample of size $n=2500$ from the population of all registered voters in the U.S., and you find that 1325 of them favor the Affordable Care Act.  Suppose that you would like to make a confidence interval for</p>

<blockquote>
  <p>$p =$ the proportion of all registered voters in the U.S. who support the Act.</p>
</blockquote>

<p>You don’t have the raw data present in a data frame, but you have enough summary data to use <code>proptestGC()</code>.  You just have to set some new arguments:</p>

<ul>
  <li>set <code>x</code> to 1325, the number of “successes” you are counting up;</li>
  <li>set <code>n</code> to 2500, the sample size.</li>
</ul>

<p>So if you only want a 95%-confidence interval for $p$. use:</p>

<pre><code>proptestGC(x=1325,n=2500)

## 
## 
## Inferential Procedures for a Single Proportion p:
## 	Results based on Summary Data
## 	Continuity Correction Applied to Test Statistic
## 
## 
## Descriptive Results:
## 
##  successes    n estimated.prop
##       1325 2500           0.53
## 
## 
## Inferential Results:
## 
## Estimate of p:	 0.53 
## SE(p.hat):	 0.009982 
## 
## 95% Confidence Interval for p:
## 
##           lower.bound         upper.bound          
##           0.510436            0.549564
</code></pre>

<h3 id="interval-and-test-1">Interval and Test</h3>

<p>If you also want to do a test of significance, again specify <code>p</code> and <code>alternative</code>.  For example, to test the hypotheses</p>

<blockquote>
  <p>$H_0:  p = 0.50$</p>
</blockquote>

<blockquote>
  <p>$H_a: p &lt; 0.50$</p>
</blockquote>

<p>use:</p>

<pre><code>proptestGC(x=1325,n=2500,
        p=0.50,,alternative="less")

## 
## 
## Inferential Procedures for a Single Proportion p:
## 	Results based on Summary Data
## 	Continuity Correction Applied to Test Statistic
## 
## 
## Descriptive Results:
## 
##  successes    n estimated.prop
##       1325 2500           0.53
## 
## 
## Inferential Results:
## 
## Estimate of p:	 0.53 
## SE(p.hat):	 0.009982 
## 
## 95% Confidence Interval for p:
## 
##           lower.bound         upper.bound          
##           0.000000            0.546419             
## 
## Test of Significance:
## 
## 	H_0:  p = 0.5 
## 	H_a:  p &lt; 0.5 
## 
## 	Test Statistic:		z = 3.025 
## 	P-value:		P = 0.9988
</code></pre>

<h2 id="difference-of-two-proportions-data-frame">Difference of Two Proportions, Data Frame</h2>

<h3 id="confidence-interval-only-2">Confidence Interval Only</h3>

<p>Suppose</p>

<blockquote>
  <p>$p_1 =$ proportion of all GC females who believe they get enough sleep</p>
</blockquote>

<blockquote>
  <p>$p_2 =$ proportion of all GC males who believe they get enough sleep</p>
</blockquote>

<p>If you desire, say, an 85%-confidence interval for $p_1 - p_2$, then use:</p>

<pre><code>proptestGC(~sex+enough_Sleep,data=m111survey,
        success="yes",conf.level=0.85)

## 
## 
## Inferential Procedures for the Difference of Two Proportions p1-p2:
## 	 enough_Sleep grouped by sex 
## 
## 
## Descriptive Results:
## 
##        yes  n estimated.prop
## female  14 40         0.3500
## male    11 31         0.3548
## 
## 
## Inferential Results:
## 
## Estimate of p1-p2:	 -0.004839 
## SE(p1.hat - p2.hat):	 0.1143 
## 
## 85% Confidence Interval for p1-p2:
## 
##           lower.bound         upper.bound          
##           -0.169426           0.159749
</code></pre>

<h3 id="interval-and-test-2">Interval and Test</h3>

<p>If you want a 95%-confidence interval for $p_1 - p_2$ and you would like to test the hypotheses:</p>

<blockquote>
  <p>$H_0:  p_1 - p_2 = 0$</p>
</blockquote>

<blockquote>
  <p>$H_a: p_1 - p_2 \neq 0$</p>
</blockquote>

<p>then use:</p>

<pre><code>proptestGC(~sex+enough_Sleep,data=m111survey,
      success="yes",p=0)

## 
## 
## Inferential Procedures for the Difference of Two Proportions p1-p2:
## 	 enough_Sleep grouped by sex 
## 
## 
## Descriptive Results:
## 
##        yes  n estimated.prop
## female  14 40         0.3500
## male    11 31         0.3548
## 
## 
## Inferential Results:
## 
## Estimate of p1-p2:	 -0.004839 
## SE(p1.hat - p2.hat):	 0.1143 
## 
## 95% Confidence Interval for p1-p2:
## 
##           lower.bound         upper.bound          
##           -0.228929           0.219252             
## 
## Test of Significance:
## 
## 	H_0:  p1-p2 = 0
## 	H_a:  p1-p2 != 0
## 
## 	Test Statistic:		z = -0.04232 
## 	P-value:		P = 0.9662
</code></pre>

<p>Notice that this time:</p>

<ul>
  <li>you specified the Null’s belief about the value of $p_1-p_2$ using the <code>p</code> argument;</li>
  <li>you did not have to set <code>conf.level</code> to 0.95 (the default value of the argument is 0.95 already);</li>
  <li>you did not have to specify the two-sided alternative (the default value of <code>alternative</code> is already “two.sided”).</li>
</ul>

<h3 id="order-of-the-groups">Order of the Groups</h3>

<p>Suppose that in the previous situation you had defined:</p>

<blockquote>
  <p>$p_1 =$ proportion of all GC males who believe they get enough sleep</p>
</blockquote>

<blockquote>
  <p>$p_2 =$ proportion of all GC females who believe they get enough sleep</p>
</blockquote>

<p>Then for you, the first population is all GC males and the second population is all GC females.  In order to guarantee that R abides by your choice, use the argument <code>first</code>:</p>

<pre><code>proptestGC(~sex+enough_Sleep,data=m111survey,
      success="yes",p=0,first="male")

## 
## 
## Inferential Procedures for the Difference of Two Proportions p1-p2:
## 	 enough_Sleep grouped by sex 
## 
## 
## Descriptive Results:
## 
##        yes  n estimated.prop
## male    11 31         0.3548
## female  14 40         0.3500
## 
## 
## Inferential Results:
## 
## Estimate of p1-p2:	 0.004839 
## SE(p1.hat - p2.hat):	 0.1143 
## 
## 95% Confidence Interval for p1-p2:
## 
##           lower.bound         upper.bound          
##           -0.219252           0.228929             
## 
## Test of Significance:
## 
## 	H_0:  p1-p2 = 0
## 	H_a:  p1-p2 != 0
## 
## 	Test Statistic:		z = 0.04232 
## 	P-value:		P = 0.9662
</code></pre>

<h2 id="difference-of-two-proportions-summary-data">Difference of Two Proportions, Summary Data</h2>

<h3 id="confidence-interval-only-3">Confidence Interval Only</h3>

<p>Suppose that you have taken two independent samples from two populations (or performed a completely randomized experiment with two treatment groups), and you have the following summary data:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: center">Group</th>
      <th style="text-align: center">Success Count</th>
      <th style="text-align: center">Sample Size</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: center">group one</td>
      <td style="text-align: center">1325</td>
      <td style="text-align: center">2500</td>
    </tr>
    <tr>
      <td style="text-align: center">group two</td>
      <td style="text-align: center">905</td>
      <td style="text-align: center">1800</td>
    </tr>
  </tbody>
</table>

<p>You need to provide the summary data to the arguments <code>x</code> and <code>n</code> as lists using the <code>c()</code> function.  In each list, data from the first group should come first.</p>

<p>For a 95%-confidence interval for $p_1 - p_2$, use:</p>

<pre><code>proptestGC(x=c(1325,905),n=c(2500,1800))

## 
## 
## Inferential Procedures for the Difference of Two Proportions p1-p2:
## 	Results taken from summary data.
## 
## 
## Descriptive Results:
## 
##         successes    n estimated.prop
## Group 1      1325 2500         0.5300
## Group 2       905 1800         0.5028
## 
## 
## Inferential Results:
## 
## Estimate of p1-p2:	 0.02722 
## SE(p1.hat - p2.hat):	 0.01544 
## 
## 95% Confidence Interval for p1-p2:
## 
##           lower.bound         upper.bound          
##           -0.003048           0.057492
</code></pre>

<h3 id="interval-and-test-3">Interval and Test</h3>

<p>Suppose that you want a 90%-confidence interval for $p_1 - p_2$ and that you would like to test the hypotheses:</p>

<blockquote>
  <p>$H_0:  p_1 - p_2 = 0$</p>
</blockquote>

<blockquote>
  <p>$H_a: p_1 - p_2 &gt; 0$</p>
</blockquote>

<p>Suppose also that you want a graph of the $P$-value.  Then use:</p>

<pre><code>proptestGC(x=c(1325,905),n=c(2500,1800),
           p=0,conf.level=0.90,graph=TRUE)

## 
## 
## Inferential Procedures for the Difference of Two Proportions p1-p2:
## 	Results taken from summary data.
## 
## 
## Descriptive Results:
## 
##         successes    n estimated.prop
## Group 1      1325 2500         0.5300
## Group 2       905 1800         0.5028
## 
## 
## Inferential Results:
## 
## Estimate of p1-p2:	 0.02722 
## SE(p1.hat - p2.hat):	 0.01544 
## 
## 90% Confidence Interval for p1-p2:
## 
##           lower.bound         upper.bound          
##           0.001819            0.052626             
## 
## Test of Significance:
## 
## 	H_0:  p1-p2 = 0
## 	H_a:  p1-p2 != 0
## 
## 	Test Statistic:		z = 1.763 
## 	P-value:		P = 0.07797
</code></pre>

<p><img src="/images/figure/proptesttut2propssummary.png" alt="plot of chunk proptesttut2propssummary" /> </p>

]]></content>
  </entry>
  
</feed>
