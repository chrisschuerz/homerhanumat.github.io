<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech Note | A Statistics Blog]]></title>
  <link href="http://homerhanumat.github.io/blog/categories/tech-note/atom.xml" rel="self"/>
  <link href="http://homerhanumat.github.io/"/>
  <updated>2014-04-29T13:30:37-04:00</updated>
  <id>http://homerhanumat.github.io/</id>
  <author>
    <name><![CDATA[Homer White]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Roctopress: Configure Your Octopress Blog for R]]></title>
    <link href="http://homerhanumat.github.io/blog/2014/04/13/roctopress/"/>
    <updated>2014-04-13T16:00:00-04:00</updated>
    <id>http://homerhanumat.github.io/blog/2014/04/13/roctopress</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#directory-house-keeping">Directory House-Keeping</a></li>
  <li><a href="#from-r-markdown-to-markdown">From R Markdown to Markdown</a></li>
  <li><a href="#from-r-markdown-to-html">From R Markdown to HTML</a></li>
  <li><a href="#considerations-of-style">Considerations of Style</a></li>
  <li><a href="#producing-a-post">Producing a Post</a></li>
  <li><a href="#section">```</a></li>
  <li><a href="#creating-a-topics-feed">Creating a Topics Feed</a></li>
  <li><a href="#section-1">```</a></li>
  <li><a href="#archive-old-r-markdowns">Archive Old R Markdowns</a></li>
  <li><a href="#lingering-problems">Lingering Problems</a></li>
</ul>

<h2 id="introduction">Introduction</h2>

<p>This post records how I configured <a href="http://octopress.org/">Octopress</a> for blogging about <a href="http://www.r-project.org/">R</a>, my favorite statistical programming environment.  It is intended for colleagues and students who would like to begin blogging in a similar vein.  I will assume that you have got Octopress up and running, and that you have chosen to have it hosted by <a href="https://pages.github.com/">GitHub Pages</a>.</p>

<p>I claim little in the way of originality:  most of this post consists of tips I picked up from knowledgeable people on the web.</p>

<h2 id="directory-house-keeping">Directory House-Keeping</h2>

<p>Create the following directories in the Octopress directory:</p>

<ul>
  <li><code>Rmd_sources</code> (your posts will start here)</li>
  <li><code>Rmd_sources_old</code> (to archive old posts source files)</li>
  <li><code>source/images/figure</code> (your R graphs will be placed here)</li>
  <li><code>source/images/cache</code> (if you cache the results of an expensive computation, the results go here)</li>
</ul>

<h2 id="from-r-markdown-to-markdown">From R Markdown to Markdown</h2>

<p>We will adopt the approach of <a href="http://jason.bryer.org/posts/2012-12-10/Markdown_Jekyll_R_for_Blogging.html">Jason Breyer</a>.</p>

<p>In your Octopress directory, place the Jason’s R Script (perhaps call it <code>rmarkdown.r</code>):</p>

<pre><code>#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param dir the directory to process R Markdown files.
#' @param images.dir the base directory where images will be generated.
#' @param images.url
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer &lt;jason@bryer.org&gt;
convertRMarkdown &lt;- function(dir=getwd(), images.dir=dir, 
                             images.url='/images/',
                             out_ext='.markdown', in_ext='.rmd', recursive=FALSE) {
        require(knitr, quietly=TRUE, warn.conflicts=FALSE)
        files &lt;- list.files(path=dir, pattern=in_ext, ignore.case=TRUE, recursive=recursive)
        for(f in files) {
                message(paste("Processing ", f, sep=''))
                content &lt;- readLines(f)
                frontMatter &lt;- which(substr(content, 1, 3) == '---')
                if(length(frontMatter) &gt;= 2 &amp; 1 %in% frontMatter) {
                        statusLine &lt;- which(substr(content, 1, 7) == 'status:')
                        publishedLine &lt;- which(substr(content, 1, 10) == 'published:')
                        if(statusLine &gt; frontMatter[1] &amp; statusLine &lt; frontMatter[2]) {
                                status &lt;- unlist(strsplit(content[statusLine], ':'))[2]
                                status &lt;- sub('[[:space:]]+$', '', status)
                                status &lt;- sub('^[[:space:]]+', '', status)
                                if(tolower(status) == 'process') {
                                        #This is a bit of a hack but if a line has zero length (i.e. a
                                        #black line), it will be removed in the resulting markdown file.
                                        #This will ensure that all line returns are retained.
                                        content[nchar(content) == 0] &lt;- ' '
                                        message(paste('Processing ', f, sep=''))
                                        content[statusLine] &lt;- 'status: publish'
                                        content[publishedLine] &lt;- 'published: true'
                                        outFile &lt;- paste(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext, sep='')
                                        render_markdown(strict=TRUE)
                                        opts_knit$set(out.format='markdown')
                                        opts_knit$set(fig.path="images/")
                                        opts_knit$set(base.dir=images.dir)
                                        opts_knit$set(base.url=images.url)
                                        opts_knit$set(fig.width=3.5,fig.height=3,tidy=FALSE)
                                        try(knit(text=content, output=outFile), silent=FALSE)
                                } else {
                                        warning(paste("Not processing ", f, ", status is '", status,
                                                                 "'. Set status to 'process' to convert.", sep=''))
                                }
                        } else {
                                warning("Status not found in front matter.")
                        }
                } else {
                        warning("No front matter found. Will not process this file.")
                }
        }
        invisible()
}
</code></pre>

<h2 id="from-r-markdown-to-html">From R Markdown to HTML</h2>

<p>Octopress ships with  <code>rdiscount</code> as the converter from markdown to HTML, but to handle math you want another converter.  I played around with <code>pandoc</code> for a while, but eventually decided on <code>kramdown</code>.</p>

<p>Octopress may be “locked” to a specific older version of <code>kramdown</code>, so install that version:</p>

<p><code>
gem install kramdown -v 0.13.8
</code></p>

<p>Now modify your Gemfile to include <code>kramdown</code>.  For example, my Gemfile now looks like:</p>

<p>```
source “https://rubygems.org”</p>

<p>group :development do
  gem ‘rake’, ‘~&gt; 0.9’
  gem ‘jekyll’, ‘~&gt; 0.12’
  gem ‘kramdown’, ‘~&gt; 0.13.8’
  gem ‘rdiscount’, ‘~&gt; 2.0.7’
  gem ‘pygments.rb’, ‘~&gt; 0.3.4’
  gem ‘RedCloth’, ‘~&gt; 4.2.9’
  gem ‘haml’, ‘~&gt; 3.1.7’
  gem ‘compass’, ‘~&gt; 0.12.2’
  gem ‘sass’, ‘~&gt; 3.2’
  gem ‘sass-globbing’, ‘~&gt; 1.0.0’
  gem ‘rubypants’, ‘~&gt; 0.2.0’
  gem ‘rb-fsevent’, ‘~&gt; 0.9’
  gem ‘stringex’, ‘~&gt; 1.4.0’
  gem ‘liquid’, ‘~&gt; 2.3.0’
  gem ‘directory_watcher’, ‘1.4.1’
end</p>

<p>gem ‘sinatra’, ‘~&gt; 1.4.2’
```</p>

<p>Also, edit your <code>_config.yml</code> file:</p>

<p><code>
gems: [ 'kramdown' ]
markdown: kramdown
</code></p>

<p>To get MathJax to work, my source is <a href="http://blog.zhengdong.me/2012/12/19/latex-math-in-octopress">Zheng Dong</a>,</p>

<p>Open <code>source/_includes/custom/head.html</code> and add the following:</p>

<p>```
<!-- MathJax -->
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      processEscapes: true
    }
  });
</script></p>

<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
      }
    });
</script>

<script type="text/x-mathjax-config">
    MathJax.Hub.Queue(function() {
        var all = MathJax.Hub.getAllJax(), i;
        for(i=0; i < all.length; i += 1) {
            all[i].SourceElement().parentNode.className += ' has-jax';
        }
    });
</script>

<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<p>```</p>

<h2 id="considerations-of-style">Considerations of Style</h2>

<p>Open <code>octopress/sass/custom/_styles.css</code> and add:</p>

<p>```
#markdown-toc:before {
  content: “In this Post”;
  font-weight: bold;
}
ul#markdown-toc {
  list-style: none;
  float: right;
  @include shadow-box;
  background-color: white;
}</p>

<p>caption {
  font-weight:  bolder;
  text-align:  center;
  margin-bottom:  20px; 
}</p>

<p>figcaption {
  font-weight:  bolder;
  text-align:  center;
  margin-bottom:  30px; 
}</p>

<p>p img {
  display: block;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 10px;
  border-style:  ridge;
  border-color:  teal;
  border-width:  thick;
  padding:  5px 5px 5px 5px;
}</p>

<p>table, th, td
{
border: 1px solid black;
}</p>

<p>td
{
padding:15px;
}</p>

<p>table, td, th
{
border:1px solid green;
}
th
{
background-color: rgb(147,161,161);
color:white;
}</p>

<p>table {
    margin-left:auto; 
    margin-right:auto;
    margin-bottom:  30px;
  }</p>

<p>dt {
  display:  block;
  font-weight:  bolder;
  margin-bottom:  15px;</p>

<p>}</p>

<p>dd {
  display:  block;
  border-style:  double;
  border-color:  blue;
  border-width:  medium;
  padding:  5px 5px 5px 5px;
  margin-bottom:  15px;
}</p>

<p>dl {
  margin-bottom:  30px;
}
```</p>

<p>Drawback:  your blog will look exactly like my blog.</p>

<p>Notes:</p>

<ul>
  <li>the table of contents styling was from <a href="http://blog.riemann.cc/2013/04/10/table-of-contents-in-octopress/">Robert Riemann</a>.</li>
  <li>CSS for <code>caption</code> and <code>figcaption</code> are left over from earlier experiments with <code>pandoc</code>, but I’m retaining them in case they come in handy later.</li>
</ul>

<h2 id="producing-a-post">Producing a Post</h2>

<p>Create a new .Rmd document, and put it in <code>Rmd_sources</code>.  At the top, make sure you have stuff like this:</p>

<h2 id="section">```</h2>
<p>layout: post
title: “Your Title Here in Quotes”
date: 2014-04-17 01:00:00
comments: true
categories: [YourCategoryName]
published: true
status: publish
—
```</p>

<p>If you want the table of contents that <code>kramdown</code> provides, then add the following a couple of lines on down:</p>

<p>```
* will be replaced by TOC</p>
<p>```</p>

<p>It’s a good idea to set some chunk options (use <code>include-FALSE</code>):</p>

<p><code>
opts_chunk$set(tidy=FALSE,fig.width=4.5,fig.height=3.5)
</code></p>

<p>All images from all posts end up in the same directory, so when a code chunk results in a graphic give that chunk a unique name (different from all other graph chunks that you will ever produce with this blog).</p>

<p>When you are ready to process run:</p>

<pre><code>source("~/octopress/rmarkdown.r")
</code></pre>

<p>(This assumes your working directory is your home directory, and that <code>octopress</code> is directly under your home.  Modify the path name if this is not the case.)</p>

<p>Then change working directory to <code>Rmd_sources</code> and run:</p>

<pre><code>convertRMarkdown()
system("cp figure/* ../source/images/figure")
</code></pre>

<p>If you created any cache make sure you named the chunks uniquely.  Also you need to run:</p>

<pre><code>system("cp cache/* ../source/images/cache")
</code></pre>

<p>Finally, get the markdown file into the <code>source/_posts</code> directory:</p>

<pre><code>system("cp 2014-04-01-HowToSurviveZombieArmageddonUsingR.markdown ../source/_posts")
</code></pre>

<p>Then the usual:</p>

<p><code>
rake generate
rake preview
</code></p>

<p>until it looks good, then</p>

<p><code>
rake deploy
</code></p>

<p>Then commit your changes and push to Git Hub repository:</p>

<p><code>
git add --all
git commit -m "add Zombie Armageddon Survival Guide"
git push origin source
</code></p>

<h2 id="creating-a-topics-feed">Creating a Topics Feed</h2>

<p>Say you produce something you think merits wider distribution, and want to pass it on to a great site like <a href="http://www.r-bloggers.com/">R-bloggers</a>:  then you need to create a category feed.  Here’s some help I got from <a href="http://hairysun.com/blog/2011/11/09/creating-category-feeds-in-octopress/">Matt Harrison</a>.</p>

<p>Create the file the <code>source/YourCategoryName.xml</code> (make sure to modify occurrences of “YourCategoryName” in what follows to whatever you please):</p>

<h2 id="section-1">```</h2>
<p>layout: nil
—
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" /></p>

<title>A Statistics Blog - YourCategoryName</title>
<link href="http://homerhanumat.github.io/atom.xml" rel="self" />

<link href="http://homerhanumat.github.io/" />

<updated>2014-04-29T13:30:37-04:00</updated>
<id>http://homerhanumat.github.io/</id>
<author>
    <name>Homer White</name>
    
  </author>
<generator uri="http://octopress.org/">Octopress</generator>

<p>
&lt;/feed&gt;
```</p>

<h2 id="archive-old-r-markdowns">Archive Old R Markdowns</h2>

<p>Once you are done publishing a post, move the R Markdown source into the <code>Rmd_sources_old</code> directory, so the <code>ConvertRMarkdown()</code> function won’t keep processing them needlessly.</p>

<h2 id="lingering-problems">Lingering Problems</h2>

<ul>
  <li><code>kramdown</code> differs from <code>knitr</code> in how it recognizes math.  If you see odd results, consult the <code>kramdown</code> documentation on the web to learn how to really really do it right.  If you want to keep on the R Markdown way, then from time to time you may have to escape certain special characters.</li>
  <li>R-bloggers takes your stuff from a blog feed.  It does not recognize MathJax, so your math won’t render.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pander/Pandoc for Pretty Conversion on the R Studio Server]]></title>
    <link href="http://homerhanumat.github.io/blog/2014/02/01/pander-for-pretty-conversion-on-the-r-studio-server/"/>
    <updated>2014-02-01T11:42:14-05:00</updated>
    <id>http://homerhanumat.github.io/blog/2014/02/01/pander-for-pretty-conversion-on-the-r-studio-server</id>
    <content type="html"><![CDATA[<p>Eventually we get around to teaching our students to turn in Homework assignments as R Markdown documents, and towards the end of the semester many of them will do a data analysis project, complete with a report generated as an HTML file.</p>

<p>But frankly the HTML output is a bit ugly.  What if students want something that looks a bit better?  What if they use R for data analysis in another class, and the instructor wants the report in some other format—a .docx, for instance?</p>

<p>Our solution, for now, involves <a href="http://johnmacfarlane.net/pandoc/">Pandoc</a>, an excellent universal document converter written by John MacFarlane.  The R package <code>pander</code> facilitates the use of Pandoc for conversion of documents that began as R Markdown, so you just need to ask your sysadmin to install Pandoc and <code>pander</code> on the server.  <code>pander</code> calls Pandoc, which will in turn convert a Markdown document into a variety of formats:  pdf, docx, odt, etc., as per your request.</p>

<p>For pdf output, Pandoc first turns the converts the Markdown into $\LaTeX$, so you will need to make sure that $\LaTeX$ is installed on the server as well (some minimal version probably comes with the distribution).  The engine default engine for conversion is <code>pdflatex</code>, followed by <code>lualatex</code> and <code>xelatex</code>, so you need to make sure that one of these is installed.  [<code>xelatex</code> came along with our CentOS R Studio server, but had to be configured.]</p>

<p>Students would use Pandoc through the <code>Pandoc.convert()</code> function from the <code>pander</code> package.  First, one knits the r Markdown document, simply in order to produce the Markdown document along the way.  Then set the working to directory to the directory containing the file you wish to convert, and run something like:</p>

<p><code>
require(pander)
Pandoc.convert(f="MyReport.md", format="pdf", options="-S")
</code></p>

<p>R complains bitterly in the console—apparently it attempts to open a preview window but cannot—but produces the desired file in the same directory as the Markdown file.</p>

<p>We find that pdf and docx format both look rather nice.  The pdf centers plots, too (this is popular with students).  Sadly, the code chunks do lose their background color under Pandoc’s default highlighting style of “pygments”.  If you try for some other style, e.g.,</p>

<p><code>
Pandoc.convert(f="MyReport.md", format="pdf", 
  options="-S --highlight-style="tango")
</code>
then in some installations of $\LaTeX$, including the one on our server, there will be an error.  We have not yet decided whether to bug the sysadmin to install a fuller version of $\LaTeX$ in order to get overcome this difficulty.</p>

]]></content>
  </entry>
  
</feed>
