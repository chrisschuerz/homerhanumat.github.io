<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech Note | A Statistics Blog]]></title>
  <link href="http://statistics.rainandrhino.org/blog/categories/tech-note/atom.xml" rel="self"/>
  <link href="http://statistics.rainandrhino.org/"/>
  <updated>2014-08-30T06:44:03-04:00</updated>
  <id>http://statistics.rainandrhino.org/</id>
  <author>
    <name><![CDATA[Homer White]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[New Wine in an Old Bottle: R Markdown V2 and R Studio on the Cent OS Server]]></title>
    <link href="http://statistics.rainandrhino.org/blog/2014/08/27/r-studio-server-centos-pandoc-latex/"/>
    <updated>2014-08-27T21:00:00-04:00</updated>
    <id>http://statistics.rainandrhino.org/blog/2014/08/27/r-studio-server-centos-pandoc-latex</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#new-pandoc">New Pandoc</a></li>
  <li><a href="#installing-latex-packages">Installing LaTeX Packages</a></li>
</ul>

<h2 id="introduction">Introduction</h2>

<p>R Markdown Version 2 is a boon to students:  with a single click one can convert an R Markdown file to either HTML, PDF or Word format.  However, getting this feature to work fully in the R Studio server environment may require a bit of work, especially if you running the Server on a Cent OS distribution.  Although I am sure that Cent OS has many virtues, an up-to-date repository is not among them.</p>

<p>This post is the record of an arm wrasslin’ match with Cent OS and the R Studio Server version 0.98.932, from which I emerged more or less victorious.  If your IT department hosts RStudio on CentOS, then perhaps the following remarks will make your life a bit easier.  On the other hand,  if you know your way around Linux better than I do, please feel free to offer quicker or better solutions in the Comments.</p>

<p>Log on to the server, perhaps through <code>ssh</code> (secure shell).  Come armed with administrative privileges.</p>

<h2 id="new-pandoc">New Pandoc</h2>

<p>R Markdown v2 uses a newer version of the <code>pandoc</code>converter than the one available in the Cent OS repository.  Fortunately, R Studio comes bundled with the binaries of a sufficiently recent version of <code>pandoc</code>.  You obtain access to these files by establishing symbolic links in the <code>/usr/local/bin</code> directory to the <code>pandoc</code> and <code>pandoc-cite</code> binaries:</p>

<p><code>sh
sudo ln -s /usr/lib/rstudio-server/bin/pandoc/pandoc-citeproc /usr/local/bin
sudo ln -s /usr/lib/rstudio-server/bin/pandoc/pandoc /usr/local/bin
</code></p>

<h2 id="installing-latex-packages">Installing LaTeX Packages</h2>

<p>You can get Tex Live from the Cent OS repositories, but the release appears to date back to the year 2007.  Therefore it lacks a couple of packages needed by <code>pandoc</code>:</p>

<ul>
  <li>Heiko Oberdiek’s <a href="http://www.ctan.org/pkg/ifluatex">ifluatex</a>, and </li>
  <li>Donald Arsenau’s <a href="http://www.ctan.org/pkg/framed">framed</a>.</li>
</ul>

<p>Since you will download these packages from the Comprehensive Tex Archive Network, you’ll want a web-fetch utility such as <code>wget</code>.  If it’s not already installed on Cent OS, you can get it with:</p>

<p><code>sh
sudo yum install wget
</code></p>

<p>Now you can grab the relevant files with <code>wget</code>:</p>

<p><code>sh
wget http://www.ctan.org/tex-archive/macros/latex/contrib/oberdiek/ifluatex.dtx
wget http://mirrors.ctan.org/macros/latex/contrib/framed.zip
</code></p>

<p>Turning first to <code>ifluatex</code>, we begin by by unpacking the <code>.dtx</code> bundle.  This is accomplished with a <code>tex</code> command:</p>

<p><code>sh
tex ifluatex.dtx
</code></p>

<p>Several files spill out into your Home directory.  You care only about <code>ifluatex.sty</code>.  Copy it as follows:</p>

<p><code>sh
sudo cp ifluatex.sty /usr/share/texmf/tex/generic/oberdiek
</code></p>

<p>As for the <code>framed</code> package, you must first unzip the downloaded file into a directory:</p>

<p><code>sh
mkdir framed
unzip framed.zip -d framed
</code></p>

<p>Now copy the <code>framed</code> directory as follows:</p>

<p><code>sh
sudo cp -rf framed /usr/share/texmf/tex/latex
</code></p>

<p>Finally, you need to make tex aware of the existence of these new packages with <code>texhash</code>:</p>

<p><code>sh
sudo texhash
</code></p>

<p>Now you may Knit to your heart’s content!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Course Management With the RStudio Server]]></title>
    <link href="http://statistics.rainandrhino.org/blog/2014/05/02/perl-scripts-r-studio/"/>
    <updated>2014-05-02T21:00:00-04:00</updated>
    <id>http://statistics.rainandrhino.org/blog/2014/05/02/perl-scripts-r-studio</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#installation">Installation</a></li>
  <li><a href="#establishing-a-common-source-folder">Establishing a “Common Source” Folder</a></li>
  <li><a href="#automated-assignment-collectionreturn">Automated Assignment Collection/Return</a>    <ul>
      <li><a href="#student-usernames">Student Usernames</a></li>
      <li><a href="#encrypting-your-password">Encrypting Your Password</a></li>
      <li><a href="#create-subdirectories">Create Subdirectories</a></li>
    </ul>
  </li>
  <li><a href="#collect-commandline-arguments">collect commandline arguments</a>    <ul>
      <li><a href="#collect-assignments">Collect Assignments</a></li>
    </ul>
  </li>
  <li><a href="#section"><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong>***</a></li>
  <li><a href="#collect-commandline-arguments-1">collect commandline arguments</a>    <ul>
      <li><a href="#return-assignments">Return Assignments</a></li>
    </ul>
  </li>
  <li><a href="#section-1"><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong>***</a></li>
  <li><a href="#collect-commandline-arguments-2">collect commandline arguments</a>    <ul>
      <li><a href="#bumps-on-the-road">Bumps on the Road</a></li>
      <li><a href="#props-to-the-sysadmin">Props to the Sysadmin</a></li>
    </ul>
  </li>
</ul>

<h2 id="introduction">Introduction</h2>

<p>At my institution we teach both elementary and upper-level undergraduate statistics using R, in the environment of the <a href="https://www.rstudio.com/ide/download/">RStudio Linux server</a> installed and configured on our campus network.  Although students are made aware of the existence of the desktop version of RStudio and eventually are encouraged to install it on their personal machines, the default course environment is that of the server.</p>

<p>One reason for this choice is that the server allows us—instructors working in consultation with our sysadmin—to standardize the R environment (R version, installed packages, etc.) for all class members, so that if we add a feature or fix a problem we have some reasonable confidence that it will work for everyone.</p>

<p>Another reason—which constitutes the theme of this post—is that the server environment facilitates course management, especially in technical respects specific to a statistics course, where standard online content management systems such as Moodle or Blackboard may fall short.  The aim of this post is to record, for colleagues at our institution and for folks at other institutions who are considering making the switch to R, the principal ways in which in we have tweaked the server for course-management purposes.  R and RStudio are wonderful free software, but like all free software, they come with a certain “cost of ownership”, and those costs can be considerable if (like me) you begin with little in the way of programming/hacking skills.  I hope that the following information will reduce the ownership costs for others who choose to teach with R in a similar vein.</p>

<h2 id="installation">Installation</h2>

<p>I assume that you have persuaded your sysadmin to install and configure some version of the <a href="https://www.rstudio.com/ide/download/">RStudio Linux server</a>.  My sysadmin chose to set up the Cent OS version, and configured it so that all members of the campus community can access it by means of their username and password.</p>

<p>If your personal machine runs Linux—either the Ubuntu or Cent OS distribution—it’s a good idea to brush up on (or acquire) some very basic command-line skills and to install the server on your own machine as well, so you can replicate some of the strategies described below.  Just a little bit of knowledge of the innards—file permissions, etc.—pays off handsomely in being able to work with your sysadmin to diagnose and resolve quickly any problems that arise.  I myself run Ubuntu, but have not found significant differences between how the server works for me and how it works on campus.</p>

<h2 id="establishing-a-common-source-folder">Establishing a “Common Source” Folder</h2>

<p>Ask your sysadmin to grant superuser privileges t oyou and other course instructors.  Then one of you should create a folder in your Home directory on the server that will serve as a common source for course material.  The sysadmin can create a symbolic link to the folder and can set permissions so that all users may read files in the folder but only you and fellow instructors can write to it.  This folder serves as the repository for assignments, solutions, syllabi, etc.</p>

<p>If you are not the owner of the folder, you can get to it using the ellipses button in the upper right-hand corner of the Files pane.  Simply enter the path-name as specified by your sysadmin.  For one of our courses it is simply: <code>/mat111</code>.</p>

<p>From there you can navigate the directory structure in the Files pane, in the usual way.  To reset the Files pane view back to your Home directory, push the Ellipses button again and enter: <code>~</code>.</p>

<p>All of the foregoing will make sense to you once your have studied Unix-like directory structures.</p>

<h2 id="automated-assignment-collectionreturn">Automated Assignment Collection/Return</h2>

<h3 id="student-usernames">Student Usernames</h3>

<p>Once our elementary  students have acquired some proficiency with R, we introduce them to R Markdown and require them to turn in certain homework  and project assignments as R Markdown documents.  We write comments into a copy of the assignment and return it to the student.  One of the best arguments for teaching in the server environment is that this collection and return process can be automated.  Here’s how we do it these days.</p>

<p>First of all, each instructor should create a text file consisting of the network usernames of student in his or her course (or section thereof), one username per line, and name it something like <code>students.txt</code>.</p>

<p>Save the file in your Home directory on the server.</p>

<h3 id="encrypting-your-password">Encrypting Your Password</h3>

<p>You are going to create some sub-directories in Home directories of your students, so for this you will need to act as a superuser.  This action will in turn require you to provide your password to the computer.  For security reasons, you don’t want to send out the password every time you perform a superuser action, so you need to encrypt your password and provide a key in its place.  For this purpose our sysadmin has written the following Perl script:</p>

<p>``` perl
#!/usr/bin/perl -w</p>

<p>use strict;
use Crypt::RC4;</p>

<p>my($clearText,$passwordFile,$key);</p>

<p>foreach my $item(@ARGV) {</p>

<pre><code>    if ($item =~ m/--password=/i) {
            $clearText = substr($item,11,length($item)-11);
    }
 
 
    if ($item =~ m/--file=/i) {
            $passwordFile = substr($item,7,length($item)-7);
    }
 
 
    if ($item =~ m/--key=/i) {
            $key = substr($item,6,length($item)-6);
    }
</code></pre>

<p>}</p>

<p>if (!$passwordFile || !$clearText || !$key) {
print “\n USAGE: perl createpasswordfile.pl –password=<domain password=""> --key=<password file="" key=""> --file=<secure password="" file="">\n\n";
exit;
}</secure></password></domain></p>

<p>my($encryptedPassword) = RC4($key,$clearText);</p>

<p>my($OUTPUTFILE);
open ($OUTPUTFILE, “&gt;$passwordFile”) or die “Could not open $passwordFile\n”;
print $OUTPUTFILE “$encryptedPassword”;
close ($OUTPUTFILE);</p>

<p>system(“chmod 400 $passwordFile”);</p>

<p>print “\n\nPassword file $passwordFile written.\n”;
```</p>

<p>The above script, and others to follow, are house in <code>/scripts</code>.  You will use it to create an encrypted version of your password that is stored in a new file in your Home directory.  To run the script, issue the following (suitably modified) command in R:</p>

<pre><code>system("perl /scripts/createpasswordfile.pl --password=&lt;YourPassword&gt; --key=&lt;YourChosenKey&gt; --file=&lt;/path/to/YourFavFileName.txt&gt;")
</code></pre>

<p>After you run the script, clear your R History:  you don’t want to leave your password hanging out in the open.</p>

<h3 id="create-subdirectories">Create Subdirectories</h3>

<p>Here is the Perl script that we currently use to create <code>submit</code> and <code>returned</code> directories in the Home directory of each student in the class.  Obviously your sysadmin will modify it to suit the file structure of your server.</p>

<p>``` perl
#!/usr/bin/perl -w</p>

<p>use strict;
use constant TRUE =&gt; -1;
use constant FALSE =&gt; 0;
#<strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong> PARAMETERS <strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong>***</p>

<p>my($sourceRoot) = “/home/FAST”;
my($group) = “admins”;
my($userDirective) = “FAST\\”;
my($permissions) = “770”;
#<strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong>***</p>

<h1 id="collect-commandline-arguments">collect commandline arguments</h1>

<p>sub showUsage {</p>

<p>print “\nUSAGE: perl createdirectories.pl –studentfile=<filename> [--source=<source path="" /> (Alternate source path) --email=<email address=""> (Email for submission report) --group=<group name=""> (Security Group) --permissions=<nnn> (Default Directory Permissions)]\n\n";
exit;</nnn></group></email></filename></p>

<p>}</p>

<p>my($studentfile,$sendEmail,$summaryLine,$recipientAddress);
$sendEmail = FALSE;</p>

<p>foreach my $item(@ARGV) {</p>

<pre><code>    if ($item =~ m/--studentfile=/i) {
            $studentfile = substr($item,14,length($item)-14);
    }
 
    if ($item =~ m/--source=/i) {
             $sourceRoot = substr($item,9,length($item)-9);
    }
 
    if ($item =~ m/--email=/i) {
            $sendEmail = TRUE;
            $recipientAddress = substr($item,8,length($item)-8);
    }
</code></pre>

<p>if ($item =~ m/–group=/i) {
                $group = substr($item,8,length($item)-8);
        }</p>

 	if ($item =~ m/–permissions=/i) {
<pre><code>            $permissions = substr($item,14,length($item)-14);
    }
</code></pre>

<p>}</p>

<p>if (!$studentfile) {
&amp;showUsage;
}</p>

<p>$summaryLine = “\nDirectory Permission Updates:\n————————–\n\n”;</p>

<p>my($INPUTFILE);
open ($INPUTFILE, “&lt;$studentfile”) or die “Could not open $studentfile\n”;</p>

<p>while (&lt;$INPUTFILE&gt;) {</p>

<pre><code>$_ =~ s/\cM\cJ|\cM|\cJ/\n/g;  # Re-format Windows files
my($inputLine) = $_;
    chomp ($inputLine);
 
unless ($inputLine =~ /^\s*$/) {
 
 
	my($submitPath) = $sourceRoot . "/" . $inputLine . "/submit";
	my($returnPath) = $sourceRoot . "/" . $inputLine . "/returned";
	my($mynotesPath) = $sourceRoot . "/" . $inputLine ."/mynotes";

	unless (-e $submitPath) { 
		system ("mkdir $submitPath"); #or die "\nCould not create directory $submitPath.\n"; 
		$summaryLine = $summaryLine . "\nCreated submit path $submitPath for user $inputLine.\n";
	} else {
		$summaryLine = $summaryLine . "\nSubmit path $submitPath for user $inputLine already exists.\n";
	}

	unless (-e $returnPath) { 
		system ("mkdir $returnPath");  #or die "\nCould not create directory $returnPath.\n"; 
		$summaryLine = $summaryLine . "\nCreated return path $returnPath for user $inputLine.\n";
	} else {
		$summaryLine = $summaryLine . "\nReturn path $returnPath for user $inputLine already exists.\n";
	}
</code></pre>

 		unless (-e $mynotesPath) {
<pre><code>            	system ("mkdir $mynotesPath");  #or die "\nCould not create directory $returnPath.\n";
            	$summaryLine = $summaryLine . "\nCreated mynotes path $mynotesPath for user $inputLine.\n";
    	} else {
            	$summaryLine = $summaryLine . "\nmynotes path $mynotesPath for user $inputLine already exists.\n";
    	}
 
 
	my($securityToken) = $userDirective . $inputLine . ":" . $group;

	system("chown $securityToken $submitPath");
	$summaryLine = $summaryLine . "\nChanged ownership of submit path $submitPath to $securityToken.\n";
    
	system("chown $securityToken $returnPath");
	$summaryLine = $summaryLine . "\nChanged ownership of return path $returnPath to $securityToken.\n";
 	
	system("chown $securityToken $mynotesPath");
    	$summaryLine = $summaryLine . "\nChanged ownership of mynotes path $mynotesPath to $securityToken.\n";
 
    
	system("chmod $permissions $submitPath");
	$summaryLine = $summaryLine . "\nChanged permissions of submit path $submitPath to $permissions.\n";
    
	system("chmod $permissions $returnPath");
 		$summaryLine = $summaryLine . "\nChanged permissions of return path $returnPath to $permissions.\n";
 
	system("chmod $permissions $mynotesPath");
    	$summaryLine = $summaryLine . "\nChanged permissions of mynotes path $mynotesPath to $permissions.\n";
 
 
}
</code></pre>

<p>}</p>

<p>close ($INPUTFILE);</p>

<p>$summaryLine = $summaryLine . “\n”;</p>

<p>print $summaryLine;</p>

<p>if ($sendEmail == TRUE) {
        print “\nSending summary email to $recipientAddress.\n”;
        my ($emailSubject) = “Subject: RStudio directories updated”;
        my ($sendmailObject) = “/usr/sbin/sendmail -F RStudio_Grades\@georgetowncollege.edu -t”;
        my ($replyAddress) = “Reply-to: RStudio_Grades\@georgetowncollege.edu”;
        my ($recipient) = “To: $recipientAddress”;
        open (SENDMAIL, “|$sendmailObject”) or die “Cannot open $sendmailObject: $!”;
        print SENDMAIL $emailSubject;
        print SENDMAIL “\n”;
        print SENDMAIL $recipient;
        print SENDMAIL “\n”;
        print SENDMAIL $replyAddress;
        print SENDMAIL “\n”;
        print SENDMAIL “Content-type: text/plain\n\n”;
        print SENDMAIL “\n”;
        print SENDMAIL $summaryLine;
        print SENDMAIL “\n”;
        print SENDMAIL “.”;
        close (SENDMAIL);
}
```
To run the script, issue the following R command, suitably modified:</p>

<pre><code>system("perl createdirectories.pl --studentfile=&lt;StudentFileName&gt;")
</code></pre>

<p>There are options to receive an email report confirming the creation of the directories, and to set permissions for them as well.  Currently we use the default settings.</p>

<h3 id="collect-assignments">Collect Assignments</h3>

<p>Students save an assignment into their <code>submit</code> directory, named according to some convention that you establish.  Specifics vary, but the name must end with an underscore followed by the student username.  For example:  <code>HW05_jdoe.Rmd</code> is the fifth homework assignment, submitted by the student with username <code>jdoe</code>.</p>

<p>The Perl script for collection of assignments is as follows:</p>

<p>``` perl
#!/usr/bin/perl -w</p>

<p>use strict;
use File::Find;
use constant TRUE =&gt; -1;
use constant FALSE =&gt; 0;
#<strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong> PARAMETERS <strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong>***</p>

<p>my($sourceRoot) = “/home/FAST”;</p>

<h1 id="section"><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong>***</h1>

<h1 id="collect-commandline-arguments-1">collect commandline arguments</h1>

<p>sub showUsage {</p>

<p>print “\nUSAGE: perl collecthomework.pl –instructor=<name> --assignment=<name> --studentfile=<filename> \n Optional Parameters:\n\n[--source=<source path="" /> (Alternate source path)\n--destination=<destination path=""> (Alternate destination path)\n --remove (Remove homework files after copying them)\n --email=<email address=""> (Email for submission report)]\n\n";
exit;</email></destination></filename></name></name></p>

<p>}</p>

<p>my($instructor,$assignment,$studentfile,$destinationRoot,$sendEmail,$recipientAddress);</p>

<p>$sendEmail = FALSE;</p>

<p>foreach my $item(@ARGV) {</p>

<p>if ($item =~ m/–instructor=/i) {
		$instructor = substr($item,13,length($item)-13);
	}</p>

 	if ($item =~ m/–assignment=/i) {
<pre><code>            $assignment = substr($item,13,length($item)-13);
    }
 
 
if ($item =~ m/--studentfile=/i) {
            $studentfile = substr($item,14,length($item)-14);
    }
</code></pre>

 	if ($item =~ m/–source=/i) {
<pre><code>	 $sourceRoot = substr($item,9,length($item)-9);                
    }
 
if ($item =~ m/--destination=/i) {
             $destinationRoot = substr($item,14,length($item)-14);
    }
 
if ($item =~ m/--email=/i) {
            $sendEmail = TRUE;
	$recipientAddress = substr($item,8,length($item)-8);
    }
</code></pre>

<p>}</p>

<p>if (!$instructor || !$assignment || !$studentfile) {
&amp;showUsage;
}</p>

<p>if (!$destinationRoot) {
	$destinationRoot = “/home/FAST/” . $instructor . “/homework”;
}</p>

<p>my($noSubmissionYet) = “\nThe following students have not submitted homework yet:\n————————————————————”;
my($summaryLine) = “\nHomework assignments retrieved for assignment $assignment:\n————————————-“;</p>

<p>my($INPUTFILE);
open ($INPUTFILE, “&lt;$studentfile”) or die “Could not open $studentfile\n”;</p>

<p>while (&lt;$INPUTFILE&gt;) {</p>

 	$_ =~ s/\cM\cJ|\cM|\cJ/\n/g;  # Re-format Windows files
<pre><code>    my($inputLine) = $_;
    chomp ($inputLine);
 
    unless ($inputLine =~ /^\s*$/) {
 
 
 
 
 
    my(@searchFolders) = ($sourceRoot . "/" . $inputLine . "/submit");
my(@foundProjects);
 
    find( sub { push @foundProjects, $File::Find::name if /$assignment/i }, @searchFolders);
 

    my($projectFile);
 
    foreach $projectFile(@foundProjects) {
 
	print "\nFound $projectFile.";
 
            my ($destinationFolder) = $destinationRoot . "/" . $assignment . "/" . $inputLine;
            unless (-e $destinationFolder) {
                    system ("mkdir -p $destinationFolder");
            }
 
            $destinationFolder = $destinationFolder . "/";
            system ("cp -f $projectFile $destinationFolder");
	$summaryLine = $summaryLine . "\n $inputLine submitted file: $projectFile";		
 
}
 
if (!@foundProjects) {
	$noSubmissionYet = $noSubmissionYet . "\n$inputLine";
}
 
 
}
</code></pre>

<p>}</p>

<p>close ($INPUTFILE);</p>

<p>$summaryLine = $summaryLine . “\n\n” . $noSubmissionYet . “\n\n”;</p>

<p>print $summaryLine;</p>

<p>if ($sendEmail == TRUE) {
	print “\nSending summary email to $recipientAddress.\n”;
	my ($emailSubject) = “Subject: RStudio projects submitted for assignment $assignment”;
	my ($sendmailObject) = “/usr/sbin/sendmail -F RStudio_Grades\@georgetowncollege.edu -t”;
	my ($replyAddress) = “Reply-to: RStudio_Grades\@georgetowncollege.edu”;
	my ($recipient) = “To: $recipientAddress”;
	open (SENDMAIL, “|$sendmailObject”) or die “Cannot open $sendmailObject: $!”;
	print SENDMAIL $emailSubject;
	print SENDMAIL “\n”;
	print SENDMAIL $recipient;
	print SENDMAIL “\n”;
	print SENDMAIL $replyAddress;
	print SENDMAIL “\n”;
	print SENDMAIL “Content-type: text/plain\n\n”;
	print SENDMAIL “\n”;
	print SENDMAIL $summaryLine;
	print SENDMAIL “\n”;
	print SENDMAIL “.”;
	close (SENDMAIL);</p>

<p>}
```
To run the script issue a command like the following:</p>

<pre><code>system("perl /scripts/collecthomework.pl --instructor=&lt;yourUsername&gt; --assignment=&lt;assignCode&gt; --studentfile=students.txt")
</code></pre>

<p>If you would like to receive an email with a list of all students from whom you got an assignment, run this instead:</p>

<pre><code>system("perl /scripts/collecthomework.pl --instructor=&lt;yourUsername&gt; --assignment=&lt;assignCode&gt; --studentfile=students.txt --email=&lt;yourEmailAddress&gt;")
</code></pre>

<p>You can run the collection script as often as you like:  it will pick up newly-submitted assignments but will not overwrite assignments collected from other students in a previous run.</p>

<h3 id="return-assignments">Return Assignments</h3>

<p>All of the assignments you collect appear in a <code>homework</code> folder in your Home directory, in sub-directories by assignment name and sub-sub-directories by student username.  Navigate to the assignments one by one.  For each assignment, open the R Markdown file and save it with an additional tag in the file name that will mark it out as the graded/commented copy to be returned to the student.  We use <code>_com</code> as our tag, creating files like this:  <code>HW05_jdoe_com.Rmd</code>.</p>

<p>For returning assignments, we have the following Perl script:</p>

<p>``` perl
#!/usr/bin/perl -w</p>

<p>use strict;
use File::Find;
use Crypt::RC4;
use constant TRUE =&gt; -1;
use constant FALSE =&gt; 0;
#<strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong> PARAMETERS <strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong>***</p>

<p>my($sourceRoot) = “/home/FAST/”;
my($group) = “admins”;
my($userDirective) = “FAST\\”;
my($permissions) = “770”;</p>

<h1 id="section-1"><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong><strong>**</strong>***</h1>

<h1 id="collect-commandline-arguments-2">collect commandline arguments</h1>

<p>sub showUsage {</p>

<p>print “\nUSAGE: perl returnhomework.pl –path=<name> --flag=<name> --studentfile=<filename> \n Optional Parameters:\n\n[--email=<email address=""> (Email for submission report) --key=<password file="" key=""> --passwordfile=<password file="">]\n\n";
exit;</password></password></email></filename></name></name></p>

<p>}</p>

<p>my($path,$flag,$studentfile,$destinationRoot,$sendEmail,$recipientAddress,$key,$passwordFile,$decryptedPassword);</p>

<p>$sendEmail = FALSE;</p>

<p>foreach my $item(@ARGV) {</p>

<p>if ($item =~ m/–flag=/i) {
                $flag = substr($item,7,length($item)-7);
        }</p>

<pre><code>if ($item =~ m/--studentfile=/i) {
            $studentfile = substr($item,14,length($item)-14);
    }
</code></pre>

 	if ($item =~ m/–path=/i) {
<pre><code>	 $path = substr($item,7,length($item)-7);                
    }
 
if ($item =~ m/--destination=/i) {
             $destinationRoot = substr($item,14,length($item)-14);
    }
 
if ($item =~ m/--email=/i) {
            $sendEmail = TRUE;
	$recipientAddress = substr($item,8,length($item)-8);
    }
 
 
if ($item =~ m/--key=/i) {
            $key = substr($item,6,length($item)-6);
    }
 
if ($item =~ m/--passwordfile=/i) {
            $passwordFile = substr($item,15,length($item)-15);
    }
</code></pre>

<p>}</p>

<p>if ($passwordFile) {</p>

<pre><code>my($INPUTFILE);
open ($INPUTFILE, "&lt;$passwordFile") or die "Could not open $passwordFile\n";
 
while (&lt;$INPUTFILE&gt;) {
    	my($inputLine) = $_;
    	chomp ($inputLine);
 
	$decryptedPassword = RC4($key,$inputLine);
}
</code></pre>

<p>}</p>

<p>if (!$path || !$flag || !$studentfile) {
&amp;showUsage;
}</p>

<p>unless ( $path =~ s|/\s*$|/| ) 
{
    $path = $path . “/”;
}</p>

<p>if (!$destinationRoot) {
	$destinationRoot = “/home/FAST/”;
}</p>

<p>my($summaryLine) = “\nHomework graded in folder $path:\n————————————-“;</p>

<p>my($INPUTFILE);
open ($INPUTFILE, “&lt;$studentfile”) or die “Could not open $studentfile\n”;</p>

<p>while (&lt;$INPUTFILE&gt;) {</p>

 	$_ =~ s/\cM\cJ|\cM|\cJ/\n/g;  # Re-format Windows files
<pre><code>    my($inputLine) = $_;
    chomp ($inputLine);
 
    unless ($inputLine =~ /^\s*$/) {
 
 
 
    my(@searchFolders) = ($path .  $inputLine);
my(@foundProjects);
 
    find( sub { push @foundProjects, $File::Find::name if /$flag/i }, @searchFolders);
 

    my($projectFile);
 
    foreach $projectFile(@foundProjects) {
 
	print "\nFound $projectFile.";
 
            my ($destinationFolder) = $destinationRoot . $inputLine . "/returned";
            unless (-e $destinationFolder) {
                    system ("mkdir -p $destinationFolder");
            }
 
            $destinationFolder = $destinationFolder . "/";
</code></pre>

 		my($securityToken) = $userDirective . $inputLine . “:” . $group;

<pre><code>            system ("cp -f $projectFile $destinationFolder");
	
	my($folderWildcard) = $destinationFolder . "*";

 
	if ($passwordFile) {
            	system("echo $decryptedPassword | sudo chown $securityToken $folderWildcard");
            	system ("echo $decryptedPassword | sudo chmod 770 $folderWildcard");
	} else {
		system("chown $securityToken $folderWildcard");
            	system("chmod 770 $folderWildcard");
	}
 
	
	$summaryLine = $summaryLine . "\n $inputLine returned $projectFile to $destinationFolder\n";		
 
 
}
 
 
}
</code></pre>

<p>}</p>

<p>close ($INPUTFILE);</p>

<p>$summaryLine = $summaryLine . “\n”;</p>

<p>print $summaryLine;</p>

<p>if ($sendEmail == TRUE) {
	print “\nSending summary email to $recipientAddress.\n”;
	my ($emailSubject) = “Subject: RStudio projects graded and returned.”;
	my ($sendmailObject) = “/usr/sbin/sendmail -F RStudio_Grades\@georgetowncollege.edu -t”;
	my ($replyAddress) = “Reply-to: RStudio_Grades\@georgetowncollege.edu”;
	my ($recipient) = “To: $recipientAddress”;
	open (SENDMAIL, “|$sendmailObject”) or die “Cannot open $sendmailObject: $!”;
	print SENDMAIL $emailSubject;
	print SENDMAIL “\n”;
	print SENDMAIL $recipient;
	print SENDMAIL “\n”;
	print SENDMAIL $replyAddress;
	print SENDMAIL “\n”;
	print SENDMAIL “Content-type: text/plain\n\n”;
	print SENDMAIL “\n”;
	print SENDMAIL $summaryLine;
	print SENDMAIL “\n”;
	print SENDMAIL “.”;
	close (SENDMAIL);</p>

<p>}
```</p>

<p>To run the script, you need the key for your encrypted password.  Run a command like the following:</p>

<pre><code>system("perl /scripts/returnhomework.pl --path=/path/to/yourUsername/homework/HW05/ --flag=_com --studentfile=/usr/local/sbin/YourUsername-YourCourse.txt --key=YourChosenKey --passwordfile=password_file_YourUsername.txt")
</code></pre>

<p>Note that the sysadmin has established, for each instructor, a file in <code>/usr/local/sbin</code> of student usernames for the instructor’s course.  As students drop your course and you edit your local student file accordingly, the two files may fall out of sync, but the return script will still work correctly for students still enrolled in the course.</p>

<h2 id="bumps-on-the-road">Bumps on the Road</h2>

<p>All in all, the server environment has proven to be quite useful for our courses.  Nevertheless, there are a few complications and potential problems to keep in mind.</p>

<ul>
  <li>Students can read from the Common Source, directory, but cannot write to it.  If a student wishes to perform an “knitting” type of action to a file in the Common Source directory—e.g., knitting an R Markdown to HTML or previewing an R Presentation document—then she must save a copy into her Home directory and perform the knitting operations upon it.  The same often goes for other instructors (default file permissions are still a bit unclear to us).</li>
  <li><a href="https://www.rstudio.com/shiny/">Shiny apps</a> are wonderful.  We put them into the <a href="https://github.com/homerhanumat/tigerstats">ancillary package</a> that we use for our own elementary course, so that R users can run them locally once the package is installed, or run them locally after downloading them from the package’s Git Hub repository.  However, at many institutions the firewalls don’t permit execution of the Shiny scripts.  If this is the case at your own institution and you want your students to work with Shiny apps, then you must either install and configure the Shiny server or deploy the apps yourself on a site hosted by RStudio, e.g., <a href="http://shinyapps.io/">http://shinyapps.io/</a>.  We have experimented with both venues and are pleased with the results.</li>
  <li>A small percentage of users eventually experience mysterious problems—e.g., loss of ability to knit an R markdown document more than once in a single server session—that we have not been able to diagnose and resolve completely.  If the problem becomes sufficiently severe, a student could always use the desktop version, but this in itself creates a course management problem.  Larger institutions than ours may wish to consider paying for the Enterprise version of the RStudio server, and the support that accompanies it.</li>
</ul>

<h2 id="props-to-the-sysadmin">Props to the Sysadmin</h2>

<p>We are grateful for the work of Scott Switzer, who serves as Server System Manager in the Office of Information Technology Services at Georgetown College.  Scott manages the RStudio server and the College’s Shiny server, created the Perl scripts in this post, helped establish other website support for our elementary statistics course, and at an early stage played the role of informal command-line guru to the the author of this post.  If you have the good fortune to work with a such a sysadmin your own institution, make sure that she gets lots of love and special ice cream!</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roctopress: Configure Your Octopress Blog for R]]></title>
    <link href="http://statistics.rainandrhino.org/blog/2014/04/13/roctopress/"/>
    <updated>2014-04-13T16:00:00-04:00</updated>
    <id>http://statistics.rainandrhino.org/blog/2014/04/13/roctopress</id>
    <content type="html"><![CDATA[<ul id="markdown-toc">
  <li><a href="#introduction">Introduction</a></li>
  <li><a href="#directory-house-keeping">Directory House-Keeping</a></li>
  <li><a href="#from-r-markdown-to-markdown">From R Markdown to Markdown</a></li>
  <li><a href="#from-r-markdown-to-html">From R Markdown to HTML</a></li>
  <li><a href="#considerations-of-style">Considerations of Style</a></li>
  <li><a href="#producing-a-post">Producing a Post</a></li>
  <li><a href="#section">```</a></li>
  <li><a href="#creating-a-topics-feed">Creating a Topics Feed</a></li>
  <li><a href="#section-1">```</a></li>
  <li><a href="#archive-old-r-markdowns">Archive Old R Markdowns</a></li>
  <li><a href="#lingering-problems">Lingering Problems</a></li>
</ul>

<h2 id="introduction">Introduction</h2>

<p>This post records how I configured <a href="http://octopress.org/">Octopress</a> for blogging about <a href="http://www.r-project.org/">R</a>, my favorite statistical programming environment.  It is intended for colleagues and students who would like to begin blogging in a similar vein.  I will assume that you have got Octopress up and running, and that you have chosen to have it hosted by <a href="https://pages.github.com/">GitHub Pages</a>.</p>

<p>I claim little in the way of originality:  most of this post consists of tips I picked up from knowledgeable people on the web.</p>

<h2 id="directory-house-keeping">Directory House-Keeping</h2>

<p>Create the following directories in the Octopress directory:</p>

<ul>
  <li><code>Rmd_sources</code> (your posts will start here)</li>
  <li><code>Rmd_sources_old</code> (to archive old posts source files)</li>
  <li><code>source/images/figure</code> (your R graphs will be placed here)</li>
  <li><code>source/images/cache</code> (if you cache the results of an expensive computation, the results go here)</li>
</ul>

<h2 id="from-r-markdown-to-markdown">From R Markdown to Markdown</h2>

<p>We will adopt the approach of <a href="http://jason.bryer.org/posts/2012-12-10/Markdown_Jekyll_R_for_Blogging.html">Jason Breyer</a>.</p>

<p>In your Octopress directory, place the Jason’s R Script (perhaps call it <code>rmarkdown.r</code>):</p>

<pre><code>#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param dir the directory to process R Markdown files.
#' @param images.dir the base directory where images will be generated.
#' @param images.url
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer &lt;jason@bryer.org&gt;
convertRMarkdown &lt;- function(dir=getwd(), images.dir=dir, 
                             images.url='/images/',
                             out_ext='.markdown', in_ext='.rmd', recursive=FALSE) {
        require(knitr, quietly=TRUE, warn.conflicts=FALSE)
        files &lt;- list.files(path=dir, pattern=in_ext, ignore.case=TRUE, recursive=recursive)
        for(f in files) {
                message(paste("Processing ", f, sep=''))
                content &lt;- readLines(f)
                frontMatter &lt;- which(substr(content, 1, 3) == '---')
                if(length(frontMatter) &gt;= 2 &amp; 1 %in% frontMatter) {
                        statusLine &lt;- which(substr(content, 1, 7) == 'status:')
                        publishedLine &lt;- which(substr(content, 1, 10) == 'published:')
                        if(statusLine &gt; frontMatter[1] &amp; statusLine &lt; frontMatter[2]) {
                                status &lt;- unlist(strsplit(content[statusLine], ':'))[2]
                                status &lt;- sub('[[:space:]]+$', '', status)
                                status &lt;- sub('^[[:space:]]+', '', status)
                                if(tolower(status) == 'process') {
                                        #This is a bit of a hack but if a line has zero length (i.e. a
                                        #black line), it will be removed in the resulting markdown file.
                                        #This will ensure that all line returns are retained.
                                        content[nchar(content) == 0] &lt;- ' '
                                        message(paste('Processing ', f, sep=''))
                                        content[statusLine] &lt;- 'status: publish'
                                        content[publishedLine] &lt;- 'published: true'
                                        outFile &lt;- paste(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext, sep='')
                                        render_markdown(strict=TRUE)
                                        opts_knit$set(out.format='markdown')
                                        opts_knit$set(fig.path="images/")
                                        opts_knit$set(base.dir=images.dir)
                                        opts_knit$set(base.url=images.url)
                                        opts_knit$set(fig.width=3.5,fig.height=3,tidy=FALSE)
                                        try(knit(text=content, output=outFile), silent=FALSE)
                                } else {
                                        warning(paste("Not processing ", f, ", status is '", status,
                                                                 "'. Set status to 'process' to convert.", sep=''))
                                }
                        } else {
                                warning("Status not found in front matter.")
                        }
                } else {
                        warning("No front matter found. Will not process this file.")
                }
        }
        invisible()
}
</code></pre>

<h2 id="from-r-markdown-to-html">From R Markdown to HTML</h2>

<p>Octopress ships with  <code>rdiscount</code> as the converter from markdown to HTML, but to handle math you want another converter.  I played around with <code>pandoc</code> for a while, but eventually decided on <code>kramdown</code>.</p>

<p>Octopress may be “locked” to a specific older version of <code>kramdown</code>, so install that version:</p>

<p><code>
gem install kramdown -v 0.13.8
</code></p>

<p>Now modify your Gemfile to include <code>kramdown</code>.  For example, my Gemfile now looks like:</p>

<p>```
source “https://rubygems.org”</p>

<p>group :development do
  gem ‘rake’, ‘~&gt; 0.9’
  gem ‘jekyll’, ‘~&gt; 0.12’
  gem ‘kramdown’, ‘~&gt; 0.13.8’
  gem ‘rdiscount’, ‘~&gt; 2.0.7’
  gem ‘pygments.rb’, ‘~&gt; 0.3.4’
  gem ‘RedCloth’, ‘~&gt; 4.2.9’
  gem ‘haml’, ‘~&gt; 3.1.7’
  gem ‘compass’, ‘~&gt; 0.12.2’
  gem ‘sass’, ‘~&gt; 3.2’
  gem ‘sass-globbing’, ‘~&gt; 1.0.0’
  gem ‘rubypants’, ‘~&gt; 0.2.0’
  gem ‘rb-fsevent’, ‘~&gt; 0.9’
  gem ‘stringex’, ‘~&gt; 1.4.0’
  gem ‘liquid’, ‘~&gt; 2.3.0’
  gem ‘directory_watcher’, ‘1.4.1’
end</p>

<p>gem ‘sinatra’, ‘~&gt; 1.4.2’
```</p>

<p>Also, edit your <code>_config.yml</code> file:</p>

<p><code>
gems: [ 'kramdown' ]
markdown: kramdown
</code></p>

<p>To get MathJax to work, my source is <a href="http://blog.zhengdong.me/2012/12/19/latex-math-in-octopress">Zheng Dong</a>,</p>

<p>Open <code>source/_includes/custom/head.html</code> and add the following:</p>

<p>```
<!-- MathJax -->
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      processEscapes: true
    }
  });
</script></p>

<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
      }
    });
</script>

<script type="text/x-mathjax-config">
    MathJax.Hub.Queue(function() {
        var all = MathJax.Hub.getAllJax(), i;
        for(i=0; i < all.length; i += 1) {
            all[i].SourceElement().parentNode.className += ' has-jax';
        }
    });
</script>

<script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>

<p>```</p>

<h2 id="considerations-of-style">Considerations of Style</h2>

<p>Open <code>octopress/sass/custom/_styles.css</code> and add:</p>

<p>```
#markdown-toc:before {
  content: “In this Post”;
  font-weight: bold;
}
ul#markdown-toc {
  list-style: none;
  float: right;
  @include shadow-box;
  background-color: white;
}</p>

<p>caption {
  font-weight:  bolder;
  text-align:  center;
  margin-bottom:  20px; 
}</p>

<p>figcaption {
  font-weight:  bolder;
  text-align:  center;
  margin-bottom:  30px; 
}</p>

<p>p img {
  display: block;
  margin-left: auto;
  margin-right: auto;
  margin-bottom: 10px;
  border-style:  ridge;
  border-color:  teal;
  border-width:  thick;
  padding:  5px 5px 5px 5px;
}</p>

<p>table, th, td
{
border: 1px solid black;
}</p>

<p>td
{
padding:15px;
}</p>

<p>table, td, th
{
border:1px solid green;
}
th
{
background-color: rgb(147,161,161);
color:white;
}</p>

<p>table {
    margin-left:auto; 
    margin-right:auto;
    margin-bottom:  30px;
  }</p>

<p>dt {
  display:  block;
  font-weight:  bolder;
  margin-bottom:  15px;</p>

<p>}</p>

<p>dd {
  display:  block;
  border-style:  double;
  border-color:  blue;
  border-width:  medium;
  padding:  5px 5px 5px 5px;
  margin-bottom:  15px;
}</p>

<p>dl {
  margin-bottom:  30px;
}
```</p>

<p>Drawback:  your blog will look exactly like my blog.</p>

<p>Notes:</p>

<ul>
  <li>the table of contents styling was from <a href="http://blog.riemann.cc/2013/04/10/table-of-contents-in-octopress/">Robert Riemann</a>.</li>
  <li>CSS for <code>caption</code> and <code>figcaption</code> are left over from earlier experiments with <code>pandoc</code>, but I’m retaining them in case they come in handy later.</li>
</ul>

<h2 id="producing-a-post">Producing a Post</h2>

<p>Create a new .Rmd document, and put it in <code>Rmd_sources</code>.  At the top, make sure you have stuff like this:</p>

<h2 id="section">```</h2>
<p>layout: post
title: “Your Title Here in Quotes”
date: 2014-04-17 01:00:00
comments: true
categories: [YourCategoryName]
published: true
status: publish
—
```</p>

<p>If you want the table of contents that <code>kramdown</code> provides, then add the following a couple of lines on down:</p>

<p>```
* will be replaced by TOC</p>
<p>```</p>

<p>It’s a good idea to set some chunk options (use <code>include-FALSE</code>):</p>

<p><code>
opts_chunk$set(tidy=FALSE,fig.width=4.5,fig.height=3.5)
</code></p>

<p>All images from all posts end up in the same directory, so when a code chunk results in a graphic give that chunk a unique name (different from all other graph chunks that you will ever produce with this blog).</p>

<p>When you are ready to process run:</p>

<pre><code>source("~/octopress/rmarkdown.r")
</code></pre>

<p>(This assumes your working directory is your home directory, and that <code>octopress</code> is directly under your home.  Modify the path name if this is not the case.)</p>

<p>Then change working directory to <code>Rmd_sources</code> and run:</p>

<pre><code>convertRMarkdown()
system("cp figure/* ../source/images/figure")
</code></pre>

<p>If you created any cache make sure you named the chunks uniquely.  Also you need to run:</p>

<pre><code>system("cp cache/* ../source/images/cache")
</code></pre>

<p>Finally, get the markdown file into the <code>source/_posts</code> directory:</p>

<pre><code>system("cp 2014-04-01-HowToSurviveZombieArmageddonUsingR.markdown ../source/_posts")
</code></pre>

<p>Then the usual:</p>

<p><code>
rake generate
rake preview
</code></p>

<p>until it looks good, then</p>

<p><code>
rake deploy
</code></p>

<p>Then commit your changes and push to Git Hub repository:</p>

<p><code>
git add --all
git commit -m "add Zombie Armageddon Survival Guide"
git push origin source
</code></p>

<h2 id="creating-a-topics-feed">Creating a Topics Feed</h2>

<p>Say you produce something you think merits wider distribution, and want to pass it on to a great site like <a href="http://www.r-bloggers.com/">R-bloggers</a>:  then you need to create a category feed.  Here’s some help I got from <a href="http://hairysun.com/blog/2011/11/09/creating-category-feeds-in-octopress/">Matt Harrison</a>.</p>

<p>Create the file the <code>source/YourCategoryName.xml</code> (make sure to modify occurrences of “YourCategoryName” in what follows to whatever you please):</p>

<h2 id="section-1">```</h2>
<p>layout: nil
—
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" /></p>

<title>A Statistics Blog - YourCategoryName</title>
<link href="http://statistics.rainandrhino.org/atom.xml" rel="self" />

<link href="http://statistics.rainandrhino.org/" />

<updated>2014-08-30T06:44:03-04:00</updated>
<id>http://statistics.rainandrhino.org/</id>
<author>
    <name>Homer White</name>
    
  </author>
<generator uri="http://octopress.org/">Octopress</generator>

<p>
&lt;/feed&gt;
```</p>

<h2 id="archive-old-r-markdowns">Archive Old R Markdowns</h2>

<p>Once you are done publishing a post, move the R Markdown source into the <code>Rmd_sources_old</code> directory, so the <code>ConvertRMarkdown()</code> function won’t keep processing them needlessly.</p>

<h2 id="lingering-problems">Lingering Problems</h2>

<ul>
  <li><code>kramdown</code> differs from <code>knitr</code> in how it recognizes math.  If you see odd results, consult the <code>kramdown</code> documentation on the web to learn how to really really do it right.  If you want to keep on the R Markdown way, then from time to time you may have to escape certain special characters.</li>
  <li>R-bloggers takes your stuff from a blog feed.  It does not recognize MathJax, so your math won’t render.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pander/Pandoc for Pretty Conversion on the R Studio Server]]></title>
    <link href="http://statistics.rainandrhino.org/blog/2014/02/01/pander-for-pretty-conversion-on-the-r-studio-server/"/>
    <updated>2014-02-01T11:42:14-05:00</updated>
    <id>http://statistics.rainandrhino.org/blog/2014/02/01/pander-for-pretty-conversion-on-the-r-studio-server</id>
    <content type="html"><![CDATA[<p>(<strong>Added May 19, 2014</strong>:  On May 17 R Stduio announced a <a href="http://www.rstudio.com/ide/download/preview">preview release</a> of version 0.98b which will render moot the techniques described in this post, as the new version provides built-in options to convert from R Markdown to PDF and to Word formats.)</p>

<p>Eventually we get around to teaching our students to turn in Homework assignments as R Markdown documents, and towards the end of the semester many of them will do a data analysis project, complete with a report generated as an HTML file.</p>

<p>But frankly the HTML output is a bit ugly.  What if students want something that looks a bit better?  What if they use R for data analysis in another class, and the instructor wants the report in some other format—a .docx, for instance?</p>

<p>Our solution, for now, involves <a href="http://johnmacfarlane.net/pandoc/">Pandoc</a>, an excellent universal document converter written by John MacFarlane.  The R package <code>pander</code> facilitates the use of Pandoc for conversion of documents that began as R Markdown, so you just need to ask your sysadmin to install Pandoc and <code>pander</code> on the server.  <code>pander</code> calls Pandoc, which will in turn convert a Markdown document into a variety of formats:  pdf, docx, odt, etc., as per your request.</p>

<p>For pdf output, Pandoc first turns the converts the Markdown into $\LaTeX$, so you will need to make sure that $\LaTeX$ is installed on the server as well (some minimal version probably comes with the distribution).  The engine default engine for conversion is <code>pdflatex</code>, followed by <code>lualatex</code> and <code>xelatex</code>, so you need to make sure that one of these is installed.  [<code>xelatex</code> came along with our CentOS R Studio server, but had to be configured.]</p>

<p>Students would use Pandoc through the <code>Pandoc.convert()</code> function from the <code>pander</code> package.  First, one knits the r Markdown document, simply in order to produce the Markdown document along the way.  Then set the working to directory to the directory containing the file you wish to convert, and run something like:</p>

<p><code>
require(pander)
Pandoc.convert(f="MyReport.md", format="pdf", options="-S")
</code></p>

<p>R complains bitterly in the console—apparently it attempts to open a preview window but cannot—but produces the desired file in the same directory as the Markdown file.</p>

<p>We find that pdf and docx format both look rather nice.  The pdf centers plots, too (this is popular with students).  Sadly, the code chunks do lose their background color under Pandoc’s default highlighting style of “pygments”.  If you try for some other style, e.g.,</p>

<p><code>
Pandoc.convert(f="MyReport.md", format="pdf", 
  options="-S --highlight-style="tango")
</code>
then in some installations of $\LaTeX$, including the one on our server, there will be an error.  We have not yet decided whether to bug the sysadmin to install a fuller version of $\LaTeX$ in order to get overcome this difficulty.</p>

]]></content>
  </entry>
  
</feed>
